
ATTiny1634Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000146  0080026c  0080026c  00000d02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093d  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000343  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d8  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000077f5  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000824  00000000  00000000  000099d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000285e  00000000  00000000  0000a29d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_24>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e0       	ldi	r30, 0x02	; 2
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 36       	cpi	r26, 0x6C	; 108
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	ac e6       	ldi	r26, 0x6C	; 108
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 3b       	cpi	r26, 0xB2	; 178
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
  a6:	0c 94 7f 05 	jmp	0xafe	; 0xafe <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_24>:
	x = (bufUSIDR[SPI_MESSAGE_LENGTH - 1] & 0x3E) >> 1;
	if (x == muxAddr) {
		return(rVal);
	}
	else {
		serialMsgFmt("x did not equal muxAddr.. %x %x", x, muxAddr);
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
	}
	return(0);
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  c0:	8a b7       	in	r24, 0x3a	; 58
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	8a bf       	out	0x3a, r24	; 58
}
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	e0 91 6c 02 	lds	r30, 0x026C
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	e3 59       	subi	r30, 0x93	; 147
  d0:	fd 4f       	sbci	r31, 0xFD	; 253
  d2:	80 83       	st	Z, r24
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	8b bd       	out	0x2b, r24	; 43
  d8:	80 91 71 02 	lds	r24, 0x0271
  dc:	80 ff       	sbrs	r24, 0
	TIMSK &= ~(1 << OCIE0A);
	// Copy USIDR to buffer to prevent overwrite on next transfer.
	bufUSIDR[x] = USIDR;
	// Update flags and clear USI counter
	USISR = (1 << USIOIF);
	if (spiFlags & SPI_WAIT_MSG) {
  de:	0d c0       	rjmp	.+26     	; 0xfa <__vector_24+0x4c>
		if (x < (SPI_MESSAGE_LENGTH - 1)) ++x;
  e0:	90 91 6c 02 	lds	r25, 0x026C
  e4:	91 11       	cpse	r25, r1
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__vector_24+0x42>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 6c 02 	sts	0x026C, r24
  ee:	05 c0       	rjmp	.+10     	; 0xfa <__vector_24+0x4c>
		else {
			spiFlags |= SPI_COMPLETE_MSG;
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 93 71 02 	sts	0x0271, r24
			x = 0;
  f6:	10 92 6c 02 	sts	0x026C, r1
		}
	}
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <sleepADC>:
	readAllInputs();
	
}

void sleepADC() {
	PORTA |= (1 << 3);
 10c:	8b 9a       	sbi	0x11, 3	; 17
 10e:	08 95       	ret

00000110 <wakeADC>:
}

void wakeADC() {
	PORTA |= (1 << 3);
 110:	8b 9a       	sbi	0x11, 3	; 17
	PORTA &= ~(1 << 3);
 112:	8b 98       	cbi	0x11, 3	; 17
	PORTA |= (1 << 3);
 114:	8b 9a       	sbi	0x11, 3	; 17
	PORTA &= ~(1 << 3);
 116:	8b 98       	cbi	0x11, 3	; 17
 118:	08 95       	ret

0000011a <setMode>:

}


void setMode(uint8_t newMode) {
	switch(newMode) {
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	19 f0       	breq	.+6      	; 0x124 <setMode+0xa>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	19 f0       	breq	.+6      	; 0x128 <setMode+0xe>
 122:	08 95       	ret
		case MODE_IDSS:
			PORTA |= (1 << 4);
 124:	8c 9a       	sbi	0x11, 4	; 17
 126:	08 95       	ret
		break;
		case MODE_VP:
			PORTA &= ~(1 << 4);
 128:	8c 98       	cbi	0x11, 4	; 17
 12a:	08 95       	ret

0000012c <serialSendByte>:
		break;
	}
}

void serialSendByte(char b) {
	while (!(UCSR0A & (1<<UDRE0)));
 12c:	06 b4       	in	r0, 0x26	; 38
 12e:	05 fe       	sbrs	r0, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <serialSendByte>
	// set data into data register
	UDR0 = b;
 132:	80 bd       	out	0x20, r24	; 32
 134:	08 95       	ret

00000136 <serialMsg>:
}

void serialMsg(char *msg) {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	while (*msg) {
 13c:	89 91       	ld	r24, Y+
 13e:	88 23       	and	r24, r24
 140:	19 f0       	breq	.+6      	; 0x148 <serialMsg+0x12>
		serialSendByte(*msg++);
 142:	0e 94 96 00 	call	0x12c	; 0x12c <serialSendByte>
 146:	fa cf       	rjmp	.-12     	; 0x13c <serialMsg+0x6>
	}
	return;
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <serialMsgFmt>:

void serialMsgFmt(char *fmt, ...) {
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	ae 01       	movw	r20, r28
 158:	4b 5f       	subi	r20, 0xFB	; 251
 15a:	5f 4f       	sbci	r21, 0xFF	; 255
 15c:	da 01       	movw	r26, r20
 15e:	6d 91       	ld	r22, X+
 160:	7d 91       	ld	r23, X+
 162:	ad 01       	movw	r20, r26
	memset((void *) genBuf, 0, sizeof(genBuf));
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	e2 eb       	ldi	r30, 0xB2	; 178
 16a:	f2 e0       	ldi	r31, 0x02	; 2
 16c:	df 01       	movw	r26, r30
 16e:	9c 01       	movw	r18, r24
 170:	1d 92       	st	X+, r1
 172:	21 50       	subi	r18, 0x01	; 1
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <serialMsgFmt+0x22>
	va_list args;
	va_start(args, fmt);
	vsprintf(genBuf, fmt, args);
 178:	cf 01       	movw	r24, r30
 17a:	0e 94 a0 02 	call	0x540	; 0x540 <vsprintf>
	va_end(args);
	serialMsg(genBuf);
 17e:	82 eb       	ldi	r24, 0xB2	; 178
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	0e 94 9b 00 	call	0x136	; 0x136 <serialMsg>
	serialMsg("\r\n");
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 9b 00 	call	0x136	; 0x136 <serialMsg>
	return;
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <spiTransfer8>:
		x--;
	}
	return(x);
}

uint8_t spiTransfer8(uint8_t data) {
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	1f 92       	push	r1
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	serialMsgFmt("Sending a byte of data over USI-SPI: %x", data);
 19e:	1f 92       	push	r1
 1a0:	8f 93       	push	r24
 1a2:	23 e0       	ldi	r18, 0x03	; 3
 1a4:	31 e0       	ldi	r19, 0x01	; 1
 1a6:	3f 93       	push	r19
 1a8:	2f 93       	push	r18
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	USIDR = data;
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	8c bd       	out	0x2c, r24	; 44
	USISR = _BV(USIOIF); // clear flag
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	8b bd       	out	0x2b, r24	; 43
	while ( (USISR & _BV(USIOIF)) == 0 ) {
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
		USICR = (1<<USIWM1) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 1c0:	8b e2       	ldi	r24, 0x2B	; 43

uint8_t spiTransfer8(uint8_t data) {
	serialMsgFmt("Sending a byte of data over USI-SPI: %x", data);
	USIDR = data;
	USISR = _BV(USIOIF); // clear flag
	while ( (USISR & _BV(USIOIF)) == 0 ) {
 1c2:	0b b4       	in	r0, 0x2b	; 43
 1c4:	06 fc       	sbrc	r0, 6
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <spiTransfer8+0x38>
		USICR = (1<<USIWM1) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 1c8:	8a bd       	out	0x2a, r24	; 42
 1ca:	fb cf       	rjmp	.-10     	; 0x1c2 <spiTransfer8+0x2e>
	}
	data = USIDR;
 1cc:	8c b5       	in	r24, 0x2c	; 44
	serialMsgFmt("Shifted in a byte from USI-SPI: %x", data);
 1ce:	1f 92       	push	r1
 1d0:	8f 93       	push	r24
 1d2:	2b e2       	ldi	r18, 0x2B	; 43
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	3f 93       	push	r19
 1d8:	2f 93       	push	r18
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	USISR = (1<<USIOIF);             // clear IRQ
	USICR = (1<<USIWM0)|(1<<USICS0); // start clock
	while ((USISR & (1<<USIOIF)) == 0); // send 8 bits
	USICR = (1<<USIWM0)|(0<<USICS0); // stop clock after
	*/
}
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <spiTransferMulti>:
	}
	return(0);
}


uint8_t spiTransferMulti(unsigned char *string, unsigned char *retString, unsigned char len) {
 1f2:	af 92       	push	r10
 1f4:	bf 92       	push	r11
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	8c 01       	movw	r16, r24
 20e:	7b 01       	movw	r14, r22
	unsigned char x = len;
	while (x) {
		retString[x-1] = spiTransfer8(string[len - x]);
 210:	c4 2e       	mov	r12, r20
 212:	d1 2c       	mov	r13, r1
}


uint8_t spiTransferMulti(unsigned char *string, unsigned char *retString, unsigned char len) {
	unsigned char x = len;
	while (x) {
 214:	44 23       	and	r20, r20
 216:	b1 f0       	breq	.+44     	; 0x244 <spiTransferMulti+0x52>
		retString[x-1] = spiTransfer8(string[len - x]);
 218:	84 2f       	mov	r24, r20
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	5c 01       	movw	r10, r24
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	a2 1a       	sub	r10, r18
 222:	b1 08       	sbc	r11, r1
 224:	ae 0c       	add	r10, r14
 226:	bf 1c       	adc	r11, r15
 228:	f6 01       	movw	r30, r12
 22a:	e8 1b       	sub	r30, r24
 22c:	f9 0b       	sbc	r31, r25
 22e:	e0 0f       	add	r30, r16
 230:	f1 1f       	adc	r31, r17
 232:	80 81       	ld	r24, Z
 234:	49 83       	std	Y+1, r20	; 0x01
 236:	0e 94 ca 00 	call	0x194	; 0x194 <spiTransfer8>
 23a:	f5 01       	movw	r30, r10
 23c:	80 83       	st	Z, r24
		x--;
 23e:	49 81       	ldd	r20, Y+1	; 0x01
 240:	41 50       	subi	r20, 0x01	; 1
 242:	e8 cf       	rjmp	.-48     	; 0x214 <spiTransferMulti+0x22>
	}
	return(x);
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	08 95       	ret

0000025e <spiTransferBit>:
	while ((USISR & (1<<USIOIF)) == 0); // send 8 bits
	USICR = (1<<USIWM0)|(0<<USICS0); // stop clock after
	*/
}

uint8_t spiTransferBit(uint8_t data) {
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	serialMsgFmt("Sending a bit of data over USI-SPI: %x", data);
 268:	1f 92       	push	r1
 26a:	8f 93       	push	r24
 26c:	26 eb       	ldi	r18, 0xB6	; 182
 26e:	31 e0       	ldi	r19, 0x01	; 1
 270:	3f 93       	push	r19
 272:	2f 93       	push	r18
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	USIDR = data;
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	8c bd       	out	0x2c, r24	; 44
	USISR = _BV(USIOIF); // clear flag
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	8b bd       	out	0x2b, r24	; 43
	USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 282:	8b e1       	ldi	r24, 0x1B	; 27
 284:	8a bd       	out	0x2a, r24	; 42
	data = USIDR;
 286:	8c b5       	in	r24, 0x2c	; 44
	serialMsgFmt("Shifted in a bit from USI-SPI: %x", data);
 288:	1f 92       	push	r1
 28a:	8f 93       	push	r24
 28c:	2d ed       	ldi	r18, 0xDD	; 221
 28e:	31 e0       	ldi	r19, 0x01	; 1
 290:	3f 93       	push	r19
 292:	2f 93       	push	r18
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	return(data);
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	USISR = (1<<USIOIF);             // clear IRQ
	USICR = (1<<USIWM0)|(1<<USICS0); // start clock
	while ((USISR & (1<<USIOIF)) == 0); // send 8 bits
	USICR = (1<<USIWM0)|(0<<USICS0); // stop clock after
	*/
}
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	0f 90       	pop	r0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <readInput_LTC2439>:
	}
	_delay_ms(100);
	return(0);
}

uint_fast32_t readInput_LTC2439(uint8_t muxAddr) {
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <readInput_LTC2439+0xe>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <readInput_LTC2439+0x10>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	18 2f       	mov	r17, r24
	unsigned char spiMsg[2] = {muxAddr,0xC0};
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	80 ec       	ldi	r24, 0xC0	; 192
 2c8:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char spiRetMsg[2];
	unsigned char x;
	unsigned char eocResult;
	uint_fast32_t rVal = 0;
	wakeADC();
 2ca:	0e 94 88 00 	call	0x110	; 0x110 <wakeADC>
	USICR = (1<<USIWM0)|(1<<USICS0);
 2ce:	84 e1       	ldi	r24, 0x14	; 20
 2d0:	8a bd       	out	0x2a, r24	; 42
	eocResult = spiTransferBit(1);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 2f 01 	call	0x25e	; 0x25e <spiTransferBit>
 2d8:	08 2f       	mov	r16, r24
	eocResult |= (spiTransferBit(0) << 1);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 2f 01 	call	0x25e	; 0x25e <spiTransferBit>
 2e0:	88 0f       	add	r24, r24
 2e2:	08 2b       	or	r16, r24
	spiTransferMulti(spiMsg, spiRetMsg, SPI_MESSAGE_LENGTH);
 2e4:	42 e0       	ldi	r20, 0x02	; 2
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	7c 01       	movw	r14, r24
 2ec:	bc 01       	movw	r22, r24
 2ee:	02 96       	adiw	r24, 0x02	; 2
 2f0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <spiTransferMulti>
	spiFlags |= SPI_WAIT_MSG;
 2f4:	80 91 71 02 	lds	r24, 0x0271
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	80 93 71 02 	sts	0x0271, r24
	serialMsgFmt("Waiting for SPI transfer to complete..");
 2fe:	8e e4       	ldi	r24, 0x4E	; 78
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	while (!(spiFlags & SPI_COMPLETE_MSG ));
 30a:	90 91 71 02 	lds	r25, 0x0271
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	93 ff       	sbrs	r25, 3
 314:	ff cf       	rjmp	.-2      	; 0x314 <readInput_LTC2439+0x66>
	spiFlags &= ~SPI_WAIT_MSG;
 316:	9e 7f       	andi	r25, 0xFE	; 254
 318:	90 93 71 02 	sts	0x0271, r25
	serialMsgFmt("SPI Transfer complete, value: %x", spiRetMsg);
 31c:	ff 92       	push	r15
 31e:	ef 92       	push	r14
 320:	85 e7       	ldi	r24, 0x75	; 117
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	serialMsgFmt("EOC Result value: %x", eocResult);
 32c:	1f 92       	push	r1
 32e:	0f 93       	push	r16
 330:	86 e3       	ldi	r24, 0x36	; 54
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	9f 93       	push	r25
 336:	8f 93       	push	r24
 338:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	for (x = 0; x < SPI_MESSAGE_LENGTH; x++) {
		if (x) rVal |= bufUSIDR[x] << (8 * x);
		else rVal |= bufUSIDR[x];
 33c:	40 91 6d 02 	lds	r20, 0x026D
	while (!(spiFlags & SPI_COMPLETE_MSG ));
	spiFlags &= ~SPI_WAIT_MSG;
	serialMsgFmt("SPI Transfer complete, value: %x", spiRetMsg);
	serialMsgFmt("EOC Result value: %x", eocResult);
	for (x = 0; x < SPI_MESSAGE_LENGTH; x++) {
		if (x) rVal |= bufUSIDR[x] << (8 * x);
 340:	60 91 6e 02 	lds	r22, 0x026E
		else rVal |= bufUSIDR[x];
	}
	x = (bufUSIDR[SPI_MESSAGE_LENGTH - 1] & 0x3E) >> 1;
 344:	26 2f       	mov	r18, r22
 346:	2e 73       	andi	r18, 0x3E	; 62
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	35 95       	asr	r19
 34c:	27 95       	ror	r18
	if (x == muxAddr) {
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	12 13       	cpse	r17, r18
 35a:	0b c0       	rjmp	.+22     	; 0x372 <readInput_LTC2439+0xc4>
	while (!(spiFlags & SPI_COMPLETE_MSG ));
	spiFlags &= ~SPI_WAIT_MSG;
	serialMsgFmt("SPI Transfer complete, value: %x", spiRetMsg);
	serialMsgFmt("EOC Result value: %x", eocResult);
	for (x = 0; x < SPI_MESSAGE_LENGTH; x++) {
		if (x) rVal |= bufUSIDR[x] << (8 * x);
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	76 2f       	mov	r23, r22
 360:	66 27       	eor	r22, r22
 362:	cb 01       	movw	r24, r22
 364:	77 0f       	add	r23, r23
 366:	aa 0b       	sbc	r26, r26
 368:	bb 0b       	sbc	r27, r27
		else rVal |= bufUSIDR[x];
	}
	x = (bufUSIDR[SPI_MESSAGE_LENGTH - 1] & 0x3E) >> 1;
	if (x == muxAddr) {
		return(rVal);
 36a:	bc 01       	movw	r22, r24
 36c:	cd 01       	movw	r24, r26
 36e:	64 2b       	or	r22, r20
 370:	13 c0       	rjmp	.+38     	; 0x398 <readInput_LTC2439+0xea>
	}
	else {
		serialMsgFmt("x did not equal muxAddr.. %x %x\n", x, muxAddr);
 372:	1f 92       	push	r1
 374:	1f 93       	push	r17
 376:	3f 93       	push	r19
 378:	2f 93       	push	r18
 37a:	8b e4       	ldi	r24, 0x4B	; 75
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	9f 93       	push	r25
 380:	8f 93       	push	r24
 382:	0e 94 a7 00 	call	0x14e	; 0x14e <serialMsgFmt>
	}
	return(0);
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	cb 01       	movw	r24, r22
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	08 95       	ret

000003ae <readInput>:
	results[adcPin - 1] = readInput(adcPin);
}

uint_fast32_t readInput(uint8_t adcPin) {
	uint_fast32_t result;
	adcPin -= 1; // ie 16 Becomes 15
 3ae:	81 50       	subi	r24, 0x01	; 1
	uint8_t muxAddr;
	// Set 0b10 mandatory, 0bXX1 to select new address
	muxAddr = 0xA0;
	if (adcPin & 0x1) {
 3b0:	80 fd       	sbrc	r24, 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <readInput+0xa>
		// Set SGL and SIGN to TRUE
		muxAddr |= 0x18;
	}
	else {
		// Set SGL to TRUE and SIGN to FALSE
		muxAddr |= 0x10;
 3b4:	90 eb       	ldi	r25, 0xB0	; 176
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <readInput+0xc>
	uint8_t muxAddr;
	// Set 0b10 mandatory, 0bXX1 to select new address
	muxAddr = 0xA0;
	if (adcPin & 0x1) {
		// Set SGL and SIGN to TRUE
		muxAddr |= 0x18;
 3b8:	98 eb       	ldi	r25, 0xB8	; 184
	else {
		// Set SGL to TRUE and SIGN to FALSE
		muxAddr |= 0x10;
	}
	// Throw away the LSB
	adcPin = adcPin >> 1;
 3ba:	86 95       	lsr	r24
	muxAddr |= adcPin;
	#ifdef ADC_LTC2418
	result = readInput_LTC2418(muxAddr);
	#endif
	#ifdef ADC_LTC2439
	result = readInput_LTC2439(muxAddr);
 3bc:	89 2b       	or	r24, r25
 3be:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <readInput_LTC2439>

000003c2 <readAllInputs>:
	serialMsg("\r\n");
	return;
}


void readAllInputs(void) {
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
	uint8_t adcPin;
	readInput(1);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <readInput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	84 e3       	ldi	r24, 0x34	; 52
 3d2:	9c e0       	ldi	r25, 0x0C	; 12
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <readAllInputs+0x12>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <readAllInputs+0x1c>
 3de:	00 00       	nop
 3e0:	02 e7       	ldi	r16, 0x72	; 114
 3e2:	12 e0       	ldi	r17, 0x02	; 2
	_delay_ms(500);
	for (adcPin = 1; adcPin < ADC_INPUTS; adcPin++) {
 3e4:	c1 e0       	ldi	r28, 0x01	; 1
		results[adcPin - 1] = readInput(adcPin);
 3e6:	8c 2f       	mov	r24, r28
 3e8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <readInput>
 3ec:	f8 01       	movw	r30, r16
 3ee:	61 93       	st	Z+, r22
 3f0:	71 93       	st	Z+, r23
 3f2:	81 93       	st	Z+, r24
 3f4:	91 93       	st	Z+, r25
 3f6:	8f 01       	movw	r16, r30
 3f8:	ff ef       	ldi	r31, 0xFF	; 255
 3fa:	24 e3       	ldi	r18, 0x34	; 52
 3fc:	8c e0       	ldi	r24, 0x0C	; 12
 3fe:	f1 50       	subi	r31, 0x01	; 1
 400:	20 40       	sbci	r18, 0x00	; 0
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <readAllInputs+0x3c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <readAllInputs+0x46>
 408:	00 00       	nop

void readAllInputs(void) {
	uint8_t adcPin;
	readInput(1);
	_delay_ms(500);
	for (adcPin = 1; adcPin < ADC_INPUTS; adcPin++) {
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	c0 31       	cpi	r28, 0x10	; 16
 40e:	59 f7       	brne	.-42     	; 0x3e6 <readAllInputs+0x24>
 410:	9f ef       	ldi	r25, 0xFF	; 255
 412:	e4 e3       	ldi	r30, 0x34	; 52
 414:	fc e0       	ldi	r31, 0x0C	; 12
 416:	91 50       	subi	r25, 0x01	; 1
 418:	e0 40       	sbci	r30, 0x00	; 0
 41a:	f0 40       	sbci	r31, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <readAllInputs+0x54>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <readAllInputs+0x5e>
 420:	00 00       	nop
		results[adcPin - 1] = readInput(adcPin);
		_delay_ms(500);
	}
	_delay_ms(500);
	results[adcPin - 1] = readInput(adcPin);
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	0e 94 d7 01 	call	0x3ae	; 0x3ae <readInput>
 428:	60 93 ae 02 	sts	0x02AE, r22
 42c:	70 93 af 02 	sts	0x02AF, r23
 430:	80 93 b0 02 	sts	0x02B0, r24
 434:	90 93 b1 02 	sts	0x02B1, r25
}
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <loop>:


void setMode(uint8_t newMode) {
	switch(newMode) {
		case MODE_IDSS:
			PORTA |= (1 << 4);
 440:	8c 9a       	sbi	0x11, 4	; 17
	USART_Init((uint_fast16_t) 38400);
}

void loop(void) {
	setMode(MODE_IDSS);
	readAllInputs();
 442:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <readAllInputs>
	setMode(MODE_VP);
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 8d 00 	call	0x11a	; 0x11a <setMode>
	readAllInputs();
 44c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <readAllInputs>

00000450 <USART_Init>:
	*/
}

void USART_Init(uint_fast16_t desiredBaud ) {
	/* Set baud rate */
	uint_fast16_t baud = ((8000000L / (desiredBaud * 16L)) - 1);
 450:	a0 e0       	ldi	r26, 0x00	; 0
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	9c 01       	movw	r18, r24
 456:	ad 01       	movw	r20, r26
 458:	84 e0       	ldi	r24, 0x04	; 4
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	44 1f       	adc	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	8a 95       	dec	r24
 464:	d1 f7       	brne	.-12     	; 0x45a <USART_Init+0xa>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	72 e1       	ldi	r23, 0x12	; 18
 46a:	8a e7       	ldi	r24, 0x7A	; 122
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 5f 02 	call	0x4be	; 0x4be <__divmodsi4>
 472:	21 50       	subi	r18, 0x01	; 1
 474:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baud>>8);
 476:	32 bd       	out	0x22, r19	; 34
	UBRR0L = (unsigned char)baud;
 478:	21 bd       	out	0x21, r18	; 33
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 47a:	88 e1       	ldi	r24, 0x18	; 24
 47c:	85 bd       	out	0x25, r24	; 37
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01); 
 47e:	8e e0       	ldi	r24, 0x0E	; 14
 480:	84 bd       	out	0x24, r24	; 36
 482:	08 95       	ret

00000484 <setup>:
}

void setup(void) {
	// SPI setup
	//USICR = (1<<USIOIE) | (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC); //counter overflow interrupt enable, and 3 wire mode, external register clk
	USICR =   (1<<USIOIE) | (1<<USIWM0) | (1<<USICS1) | (1<<USICS0) | (1<<USICLK) | (1<<USITC);
 484:	8f e5       	ldi	r24, 0x5F	; 95
 486:	8a bd       	out	0x2a, r24	; 42
	DDRA |= (0b000111000);
 488:	80 b3       	in	r24, 0x10	; 16
 48a:	88 63       	ori	r24, 0x38	; 56
 48c:	80 bb       	out	0x10, r24	; 16
	
	TCCR0A = (1<<WGM01) | 0x02;
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	8b bb       	out	0x1b, r24	; 27
	OCR0A = 31;
 492:	8f e1       	ldi	r24, 0x1F	; 31
 494:	88 bb       	out	0x18, r24	; 24
	
	USART_Init((uint_fast16_t) 38400);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	96 e9       	ldi	r25, 0x96	; 150
 49a:	0c 94 28 02 	jmp	0x450	; 0x450 <USART_Init>

0000049e <main>:
}



int main(void) {
	sleepADC();
 49e:	0e 94 86 00 	call	0x10c	; 0x10c <sleepADC>
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	83 ed       	ldi	r24, 0xD3	; 211
 4a6:	90 e3       	ldi	r25, 0x30	; 48
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0xa>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x14>
 4b2:	00 00       	nop
	_delay_ms(2000);
	setup();
 4b4:	0e 94 42 02 	call	0x484	; 0x484 <setup>
    while (1) {
		loop();
 4b8:	0e 94 20 02 	call	0x440	; 0x440 <loop>
    }
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <main+0x1a>

000004be <__divmodsi4>:
 4be:	05 2e       	mov	r0, r21
 4c0:	97 fb       	bst	r25, 7
 4c2:	1e f4       	brtc	.+6      	; 0x4ca <__divmodsi4+0xc>
 4c4:	00 94       	com	r0
 4c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <__negsi2>
 4ca:	57 fd       	sbrc	r21, 7
 4cc:	07 d0       	rcall	.+14     	; 0x4dc <__divmodsi4_neg2>
 4ce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__udivmodsi4>
 4d2:	07 fc       	sbrc	r0, 7
 4d4:	03 d0       	rcall	.+6      	; 0x4dc <__divmodsi4_neg2>
 4d6:	4e f4       	brtc	.+18     	; 0x4ea <__divmodsi4_exit>
 4d8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__negsi2>

000004dc <__divmodsi4_neg2>:
 4dc:	50 95       	com	r21
 4de:	40 95       	com	r20
 4e0:	30 95       	com	r19
 4e2:	21 95       	neg	r18
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	4f 4f       	sbci	r20, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ea <__divmodsi4_exit>:
 4ea:	08 95       	ret

000004ec <__negsi2>:
 4ec:	90 95       	com	r25
 4ee:	80 95       	com	r24
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <vsprintf>:
 540:	ae e0       	ldi	r26, 0x0E	; 14
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e6 ea       	ldi	r30, 0xA6	; 166
 546:	f2 e0       	ldi	r31, 0x02	; 2
 548:	0c 94 56 05 	jmp	0xaac	; 0xaac <__prologue_saves__+0x1c>
 54c:	8c 01       	movw	r16, r24
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	8c 83       	std	Y+4, r24	; 0x04
 552:	1a 83       	std	Y+2, r17	; 0x02
 554:	09 83       	std	Y+1, r16	; 0x01
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	9f e7       	ldi	r25, 0x7F	; 127
 55a:	9e 83       	std	Y+6, r25	; 0x06
 55c:	8d 83       	std	Y+5, r24	; 0x05
 55e:	ce 01       	movw	r24, r28
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	0e 94 bd 02 	call	0x57a	; 0x57a <vfprintf>
 566:	2f 81       	ldd	r18, Y+7	; 0x07
 568:	38 85       	ldd	r19, Y+8	; 0x08
 56a:	f8 01       	movw	r30, r16
 56c:	e2 0f       	add	r30, r18
 56e:	f3 1f       	adc	r31, r19
 570:	10 82       	st	Z, r1
 572:	2e 96       	adiw	r28, 0x0e	; 14
 574:	e4 e0       	ldi	r30, 0x04	; 4
 576:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__epilogue_restores__+0x1c>

0000057a <vfprintf>:
 57a:	ac e0       	ldi	r26, 0x0C	; 12
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	e3 ec       	ldi	r30, 0xC3	; 195
 580:	f2 e0       	ldi	r31, 0x02	; 2
 582:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__prologue_saves__>
 586:	7c 01       	movw	r14, r24
 588:	6b 01       	movw	r12, r22
 58a:	8a 01       	movw	r16, r20
 58c:	fc 01       	movw	r30, r24
 58e:	17 82       	std	Z+7, r1	; 0x07
 590:	16 82       	std	Z+6, r1	; 0x06
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	81 ff       	sbrs	r24, 1
 596:	bf c1       	rjmp	.+894    	; 0x916 <vfprintf+0x39c>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	4c 01       	movw	r8, r24
 59e:	f7 01       	movw	r30, r14
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
 5a2:	f6 01       	movw	r30, r12
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	6f 01       	movw	r12, r30
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <vfprintf+0x3a>
 5b2:	ad c1       	rjmp	.+858    	; 0x90e <vfprintf+0x394>
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <vfprintf+0x4c>
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	6f 01       	movw	r12, r30
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <vfprintf+0x56>
 5c6:	b7 01       	movw	r22, r14
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 5ce:	e7 cf       	rjmp	.-50     	; 0x59e <vfprintf+0x24>
 5d0:	51 2c       	mov	r5, r1
 5d2:	31 2c       	mov	r3, r1
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	20 32       	cpi	r18, 0x20	; 32
 5d8:	a0 f4       	brcc	.+40     	; 0x602 <vfprintf+0x88>
 5da:	8b 32       	cpi	r24, 0x2B	; 43
 5dc:	69 f0       	breq	.+26     	; 0x5f8 <vfprintf+0x7e>
 5de:	30 f4       	brcc	.+12     	; 0x5ec <vfprintf+0x72>
 5e0:	80 32       	cpi	r24, 0x20	; 32
 5e2:	59 f0       	breq	.+22     	; 0x5fa <vfprintf+0x80>
 5e4:	83 32       	cpi	r24, 0x23	; 35
 5e6:	69 f4       	brne	.+26     	; 0x602 <vfprintf+0x88>
 5e8:	20 61       	ori	r18, 0x10	; 16
 5ea:	2e c0       	rjmp	.+92     	; 0x648 <vfprintf+0xce>
 5ec:	8d 32       	cpi	r24, 0x2D	; 45
 5ee:	39 f0       	breq	.+14     	; 0x5fe <vfprintf+0x84>
 5f0:	80 33       	cpi	r24, 0x30	; 48
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x88>
 5f4:	21 60       	ori	r18, 0x01	; 1
 5f6:	28 c0       	rjmp	.+80     	; 0x648 <vfprintf+0xce>
 5f8:	22 60       	ori	r18, 0x02	; 2
 5fa:	24 60       	ori	r18, 0x04	; 4
 5fc:	25 c0       	rjmp	.+74     	; 0x648 <vfprintf+0xce>
 5fe:	28 60       	ori	r18, 0x08	; 8
 600:	23 c0       	rjmp	.+70     	; 0x648 <vfprintf+0xce>
 602:	27 fd       	sbrc	r18, 7
 604:	29 c0       	rjmp	.+82     	; 0x658 <vfprintf+0xde>
 606:	30 ed       	ldi	r19, 0xD0	; 208
 608:	38 0f       	add	r19, r24
 60a:	3a 30       	cpi	r19, 0x0A	; 10
 60c:	88 f4       	brcc	.+34     	; 0x630 <vfprintf+0xb6>
 60e:	26 ff       	sbrs	r18, 6
 610:	07 c0       	rjmp	.+14     	; 0x620 <vfprintf+0xa6>
 612:	85 2d       	mov	r24, r5
 614:	6a e0       	ldi	r22, 0x0A	; 10
 616:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulqi3>
 61a:	58 2e       	mov	r5, r24
 61c:	53 0e       	add	r5, r19
 61e:	14 c0       	rjmp	.+40     	; 0x648 <vfprintf+0xce>
 620:	83 2d       	mov	r24, r3
 622:	6a e0       	ldi	r22, 0x0A	; 10
 624:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulqi3>
 628:	38 2e       	mov	r3, r24
 62a:	33 0e       	add	r3, r19
 62c:	20 62       	ori	r18, 0x20	; 32
 62e:	0c c0       	rjmp	.+24     	; 0x648 <vfprintf+0xce>
 630:	8e 32       	cpi	r24, 0x2E	; 46
 632:	21 f4       	brne	.+8      	; 0x63c <vfprintf+0xc2>
 634:	26 fd       	sbrc	r18, 6
 636:	6b c1       	rjmp	.+726    	; 0x90e <vfprintf+0x394>
 638:	20 64       	ori	r18, 0x40	; 64
 63a:	06 c0       	rjmp	.+12     	; 0x648 <vfprintf+0xce>
 63c:	8c 36       	cpi	r24, 0x6C	; 108
 63e:	11 f4       	brne	.+4      	; 0x644 <vfprintf+0xca>
 640:	20 68       	ori	r18, 0x80	; 128
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0xce>
 644:	88 36       	cpi	r24, 0x68	; 104
 646:	41 f4       	brne	.+16     	; 0x658 <vfprintf+0xde>
 648:	f6 01       	movw	r30, r12
 64a:	93 fd       	sbrc	r25, 3
 64c:	85 91       	lpm	r24, Z+
 64e:	93 ff       	sbrs	r25, 3
 650:	81 91       	ld	r24, Z+
 652:	6f 01       	movw	r12, r30
 654:	81 11       	cpse	r24, r1
 656:	bf cf       	rjmp	.-130    	; 0x5d6 <vfprintf+0x5c>
 658:	98 2f       	mov	r25, r24
 65a:	9f 7d       	andi	r25, 0xDF	; 223
 65c:	95 54       	subi	r25, 0x45	; 69
 65e:	93 30       	cpi	r25, 0x03	; 3
 660:	28 f4       	brcc	.+10     	; 0x66c <vfprintf+0xf2>
 662:	0c 5f       	subi	r16, 0xFC	; 252
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	ff e3       	ldi	r31, 0x3F	; 63
 668:	f9 83       	std	Y+1, r31	; 0x01
 66a:	0d c0       	rjmp	.+26     	; 0x686 <vfprintf+0x10c>
 66c:	83 36       	cpi	r24, 0x63	; 99
 66e:	31 f0       	breq	.+12     	; 0x67c <vfprintf+0x102>
 670:	83 37       	cpi	r24, 0x73	; 115
 672:	71 f0       	breq	.+28     	; 0x690 <vfprintf+0x116>
 674:	83 35       	cpi	r24, 0x53	; 83
 676:	09 f0       	breq	.+2      	; 0x67a <vfprintf+0x100>
 678:	5b c0       	rjmp	.+182    	; 0x730 <vfprintf+0x1b6>
 67a:	22 c0       	rjmp	.+68     	; 0x6c0 <vfprintf+0x146>
 67c:	f8 01       	movw	r30, r16
 67e:	80 81       	ld	r24, Z
 680:	89 83       	std	Y+1, r24	; 0x01
 682:	0e 5f       	subi	r16, 0xFE	; 254
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	44 24       	eor	r4, r4
 688:	43 94       	inc	r4
 68a:	51 2c       	mov	r5, r1
 68c:	54 01       	movw	r10, r8
 68e:	15 c0       	rjmp	.+42     	; 0x6ba <vfprintf+0x140>
 690:	38 01       	movw	r6, r16
 692:	f2 e0       	ldi	r31, 0x02	; 2
 694:	6f 0e       	add	r6, r31
 696:	71 1c       	adc	r7, r1
 698:	f8 01       	movw	r30, r16
 69a:	a0 80       	ld	r10, Z
 69c:	b1 80       	ldd	r11, Z+1	; 0x01
 69e:	26 ff       	sbrs	r18, 6
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <vfprintf+0x12e>
 6a2:	65 2d       	mov	r22, r5
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <vfprintf+0x132>
 6a8:	6f ef       	ldi	r22, 0xFF	; 255
 6aa:	7f ef       	ldi	r23, 0xFF	; 255
 6ac:	c5 01       	movw	r24, r10
 6ae:	2c 87       	std	Y+12, r18	; 0x0c
 6b0:	0e 94 9c 04 	call	0x938	; 0x938 <strnlen>
 6b4:	2c 01       	movw	r4, r24
 6b6:	83 01       	movw	r16, r6
 6b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 6ba:	2f 77       	andi	r18, 0x7F	; 127
 6bc:	22 2e       	mov	r2, r18
 6be:	17 c0       	rjmp	.+46     	; 0x6ee <vfprintf+0x174>
 6c0:	38 01       	movw	r6, r16
 6c2:	f2 e0       	ldi	r31, 0x02	; 2
 6c4:	6f 0e       	add	r6, r31
 6c6:	71 1c       	adc	r7, r1
 6c8:	f8 01       	movw	r30, r16
 6ca:	a0 80       	ld	r10, Z
 6cc:	b1 80       	ldd	r11, Z+1	; 0x01
 6ce:	26 ff       	sbrs	r18, 6
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <vfprintf+0x15e>
 6d2:	65 2d       	mov	r22, r5
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0x162>
 6d8:	6f ef       	ldi	r22, 0xFF	; 255
 6da:	7f ef       	ldi	r23, 0xFF	; 255
 6dc:	c5 01       	movw	r24, r10
 6de:	2c 87       	std	Y+12, r18	; 0x0c
 6e0:	0e 94 91 04 	call	0x922	; 0x922 <strnlen_P>
 6e4:	2c 01       	movw	r4, r24
 6e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 6e8:	20 68       	ori	r18, 0x80	; 128
 6ea:	22 2e       	mov	r2, r18
 6ec:	83 01       	movw	r16, r6
 6ee:	23 fc       	sbrc	r2, 3
 6f0:	1b c0       	rjmp	.+54     	; 0x728 <vfprintf+0x1ae>
 6f2:	83 2d       	mov	r24, r3
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	48 16       	cp	r4, r24
 6f8:	59 06       	cpc	r5, r25
 6fa:	b0 f4       	brcc	.+44     	; 0x728 <vfprintf+0x1ae>
 6fc:	b7 01       	movw	r22, r14
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 706:	3a 94       	dec	r3
 708:	f4 cf       	rjmp	.-24     	; 0x6f2 <vfprintf+0x178>
 70a:	f5 01       	movw	r30, r10
 70c:	27 fc       	sbrc	r2, 7
 70e:	85 91       	lpm	r24, Z+
 710:	27 fe       	sbrs	r2, 7
 712:	81 91       	ld	r24, Z+
 714:	5f 01       	movw	r10, r30
 716:	b7 01       	movw	r22, r14
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 71e:	31 10       	cpse	r3, r1
 720:	3a 94       	dec	r3
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	4f 1a       	sub	r4, r31
 726:	51 08       	sbc	r5, r1
 728:	41 14       	cp	r4, r1
 72a:	51 04       	cpc	r5, r1
 72c:	71 f7       	brne	.-36     	; 0x70a <vfprintf+0x190>
 72e:	e5 c0       	rjmp	.+458    	; 0x8fa <vfprintf+0x380>
 730:	84 36       	cpi	r24, 0x64	; 100
 732:	11 f0       	breq	.+4      	; 0x738 <vfprintf+0x1be>
 734:	89 36       	cpi	r24, 0x69	; 105
 736:	39 f5       	brne	.+78     	; 0x786 <vfprintf+0x20c>
 738:	f8 01       	movw	r30, r16
 73a:	27 ff       	sbrs	r18, 7
 73c:	07 c0       	rjmp	.+14     	; 0x74c <vfprintf+0x1d2>
 73e:	60 81       	ld	r22, Z
 740:	71 81       	ldd	r23, Z+1	; 0x01
 742:	82 81       	ldd	r24, Z+2	; 0x02
 744:	93 81       	ldd	r25, Z+3	; 0x03
 746:	0c 5f       	subi	r16, 0xFC	; 252
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	08 c0       	rjmp	.+16     	; 0x75c <vfprintf+0x1e2>
 74c:	60 81       	ld	r22, Z
 74e:	71 81       	ldd	r23, Z+1	; 0x01
 750:	07 2e       	mov	r0, r23
 752:	00 0c       	add	r0, r0
 754:	88 0b       	sbc	r24, r24
 756:	99 0b       	sbc	r25, r25
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	2f 76       	andi	r18, 0x6F	; 111
 75e:	72 2e       	mov	r7, r18
 760:	97 ff       	sbrs	r25, 7
 762:	09 c0       	rjmp	.+18     	; 0x776 <vfprintf+0x1fc>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	20 68       	ori	r18, 0x80	; 128
 774:	72 2e       	mov	r7, r18
 776:	2a e0       	ldi	r18, 0x0A	; 10
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	a4 01       	movw	r20, r8
 77c:	0e 94 df 04 	call	0x9be	; 0x9be <__ultoa_invert>
 780:	a8 2e       	mov	r10, r24
 782:	a8 18       	sub	r10, r8
 784:	44 c0       	rjmp	.+136    	; 0x80e <vfprintf+0x294>
 786:	85 37       	cpi	r24, 0x75	; 117
 788:	29 f4       	brne	.+10     	; 0x794 <vfprintf+0x21a>
 78a:	2f 7e       	andi	r18, 0xEF	; 239
 78c:	b2 2e       	mov	r11, r18
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	25 c0       	rjmp	.+74     	; 0x7de <vfprintf+0x264>
 794:	f2 2f       	mov	r31, r18
 796:	f9 7f       	andi	r31, 0xF9	; 249
 798:	bf 2e       	mov	r11, r31
 79a:	8f 36       	cpi	r24, 0x6F	; 111
 79c:	c1 f0       	breq	.+48     	; 0x7ce <vfprintf+0x254>
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <vfprintf+0x22c>
 7a0:	88 35       	cpi	r24, 0x58	; 88
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x248>
 7a4:	b4 c0       	rjmp	.+360    	; 0x90e <vfprintf+0x394>
 7a6:	80 37       	cpi	r24, 0x70	; 112
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <vfprintf+0x236>
 7aa:	88 37       	cpi	r24, 0x78	; 120
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <vfprintf+0x23c>
 7ae:	af c0       	rjmp	.+350    	; 0x90e <vfprintf+0x394>
 7b0:	2f 2f       	mov	r18, r31
 7b2:	20 61       	ori	r18, 0x10	; 16
 7b4:	b2 2e       	mov	r11, r18
 7b6:	b4 fe       	sbrs	r11, 4
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x25a>
 7ba:	8b 2d       	mov	r24, r11
 7bc:	84 60       	ori	r24, 0x04	; 4
 7be:	b8 2e       	mov	r11, r24
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <vfprintf+0x25a>
 7c2:	24 ff       	sbrs	r18, 4
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <vfprintf+0x260>
 7c6:	9f 2f       	mov	r25, r31
 7c8:	96 60       	ori	r25, 0x06	; 6
 7ca:	b9 2e       	mov	r11, r25
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x260>
 7ce:	28 e0       	ldi	r18, 0x08	; 8
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <vfprintf+0x264>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x264>
 7da:	20 e1       	ldi	r18, 0x10	; 16
 7dc:	32 e0       	ldi	r19, 0x02	; 2
 7de:	f8 01       	movw	r30, r16
 7e0:	b7 fe       	sbrs	r11, 7
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <vfprintf+0x278>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	0c 5f       	subi	r16, 0xFC	; 252
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x284>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	a4 01       	movw	r20, r8
 800:	0e 94 df 04 	call	0x9be	; 0x9be <__ultoa_invert>
 804:	a8 2e       	mov	r10, r24
 806:	a8 18       	sub	r10, r8
 808:	fb 2d       	mov	r31, r11
 80a:	ff 77       	andi	r31, 0x7F	; 127
 80c:	7f 2e       	mov	r7, r31
 80e:	76 fe       	sbrs	r7, 6
 810:	0b c0       	rjmp	.+22     	; 0x828 <vfprintf+0x2ae>
 812:	37 2d       	mov	r19, r7
 814:	3e 7f       	andi	r19, 0xFE	; 254
 816:	a5 14       	cp	r10, r5
 818:	50 f4       	brcc	.+20     	; 0x82e <vfprintf+0x2b4>
 81a:	74 fe       	sbrs	r7, 4
 81c:	0a c0       	rjmp	.+20     	; 0x832 <vfprintf+0x2b8>
 81e:	72 fc       	sbrc	r7, 2
 820:	08 c0       	rjmp	.+16     	; 0x832 <vfprintf+0x2b8>
 822:	37 2d       	mov	r19, r7
 824:	3e 7e       	andi	r19, 0xEE	; 238
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x2b8>
 828:	ba 2c       	mov	r11, r10
 82a:	37 2d       	mov	r19, r7
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x2ba>
 82e:	ba 2c       	mov	r11, r10
 830:	01 c0       	rjmp	.+2      	; 0x834 <vfprintf+0x2ba>
 832:	b5 2c       	mov	r11, r5
 834:	34 ff       	sbrs	r19, 4
 836:	0d c0       	rjmp	.+26     	; 0x852 <vfprintf+0x2d8>
 838:	fe 01       	movw	r30, r28
 83a:	ea 0d       	add	r30, r10
 83c:	f1 1d       	adc	r31, r1
 83e:	80 81       	ld	r24, Z
 840:	80 33       	cpi	r24, 0x30	; 48
 842:	11 f4       	brne	.+4      	; 0x848 <vfprintf+0x2ce>
 844:	39 7e       	andi	r19, 0xE9	; 233
 846:	09 c0       	rjmp	.+18     	; 0x85a <vfprintf+0x2e0>
 848:	32 ff       	sbrs	r19, 2
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0x2de>
 84c:	b3 94       	inc	r11
 84e:	b3 94       	inc	r11
 850:	04 c0       	rjmp	.+8      	; 0x85a <vfprintf+0x2e0>
 852:	83 2f       	mov	r24, r19
 854:	86 78       	andi	r24, 0x86	; 134
 856:	09 f0       	breq	.+2      	; 0x85a <vfprintf+0x2e0>
 858:	b3 94       	inc	r11
 85a:	33 fd       	sbrc	r19, 3
 85c:	13 c0       	rjmp	.+38     	; 0x884 <vfprintf+0x30a>
 85e:	30 ff       	sbrs	r19, 0
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x2f4>
 862:	5a 2c       	mov	r5, r10
 864:	b3 14       	cp	r11, r3
 866:	18 f4       	brcc	.+6      	; 0x86e <vfprintf+0x2f4>
 868:	53 0c       	add	r5, r3
 86a:	5b 18       	sub	r5, r11
 86c:	b3 2c       	mov	r11, r3
 86e:	b3 14       	cp	r11, r3
 870:	68 f4       	brcc	.+26     	; 0x88c <vfprintf+0x312>
 872:	b7 01       	movw	r22, r14
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	3c 87       	std	Y+12, r19	; 0x0c
 87a:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 87e:	b3 94       	inc	r11
 880:	3c 85       	ldd	r19, Y+12	; 0x0c
 882:	f5 cf       	rjmp	.-22     	; 0x86e <vfprintf+0x2f4>
 884:	b3 14       	cp	r11, r3
 886:	10 f4       	brcc	.+4      	; 0x88c <vfprintf+0x312>
 888:	3b 18       	sub	r3, r11
 88a:	01 c0       	rjmp	.+2      	; 0x88e <vfprintf+0x314>
 88c:	31 2c       	mov	r3, r1
 88e:	34 ff       	sbrs	r19, 4
 890:	12 c0       	rjmp	.+36     	; 0x8b6 <vfprintf+0x33c>
 892:	b7 01       	movw	r22, r14
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	3c 87       	std	Y+12, r19	; 0x0c
 89a:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 89e:	3c 85       	ldd	r19, Y+12	; 0x0c
 8a0:	32 ff       	sbrs	r19, 2
 8a2:	17 c0       	rjmp	.+46     	; 0x8d2 <vfprintf+0x358>
 8a4:	31 fd       	sbrc	r19, 1
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <vfprintf+0x334>
 8a8:	88 e7       	ldi	r24, 0x78	; 120
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x338>
 8ae:	88 e5       	ldi	r24, 0x58	; 88
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	b7 01       	movw	r22, r14
 8b4:	0c c0       	rjmp	.+24     	; 0x8ce <vfprintf+0x354>
 8b6:	83 2f       	mov	r24, r19
 8b8:	86 78       	andi	r24, 0x86	; 134
 8ba:	59 f0       	breq	.+22     	; 0x8d2 <vfprintf+0x358>
 8bc:	31 ff       	sbrs	r19, 1
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <vfprintf+0x34a>
 8c0:	8b e2       	ldi	r24, 0x2B	; 43
 8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <vfprintf+0x34c>
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	37 fd       	sbrc	r19, 7
 8c8:	8d e2       	ldi	r24, 0x2D	; 45
 8ca:	b7 01       	movw	r22, r14
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 8d2:	a5 14       	cp	r10, r5
 8d4:	38 f4       	brcc	.+14     	; 0x8e4 <vfprintf+0x36a>
 8d6:	b7 01       	movw	r22, r14
 8d8:	80 e3       	ldi	r24, 0x30	; 48
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 8e0:	5a 94       	dec	r5
 8e2:	f7 cf       	rjmp	.-18     	; 0x8d2 <vfprintf+0x358>
 8e4:	aa 94       	dec	r10
 8e6:	f4 01       	movw	r30, r8
 8e8:	ea 0d       	add	r30, r10
 8ea:	f1 1d       	adc	r31, r1
 8ec:	80 81       	ld	r24, Z
 8ee:	b7 01       	movw	r22, r14
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 8f6:	a1 10       	cpse	r10, r1
 8f8:	f5 cf       	rjmp	.-22     	; 0x8e4 <vfprintf+0x36a>
 8fa:	33 20       	and	r3, r3
 8fc:	09 f4       	brne	.+2      	; 0x900 <vfprintf+0x386>
 8fe:	4f ce       	rjmp	.-866    	; 0x59e <vfprintf+0x24>
 900:	b7 01       	movw	r22, r14
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 a7 04 	call	0x94e	; 0x94e <fputc>
 90a:	3a 94       	dec	r3
 90c:	f6 cf       	rjmp	.-20     	; 0x8fa <vfprintf+0x380>
 90e:	f7 01       	movw	r30, r14
 910:	86 81       	ldd	r24, Z+6	; 0x06
 912:	97 81       	ldd	r25, Z+7	; 0x07
 914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x3a0>
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	9f ef       	ldi	r25, 0xFF	; 255
 91a:	2c 96       	adiw	r28, 0x0c	; 12
 91c:	e2 e1       	ldi	r30, 0x12	; 18
 91e:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__epilogue_restores__>

00000922 <strnlen_P>:
 922:	fc 01       	movw	r30, r24
 924:	05 90       	lpm	r0, Z+
 926:	61 50       	subi	r22, 0x01	; 1
 928:	70 40       	sbci	r23, 0x00	; 0
 92a:	01 10       	cpse	r0, r1
 92c:	d8 f7       	brcc	.-10     	; 0x924 <strnlen_P+0x2>
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	8e 0f       	add	r24, r30
 934:	9f 1f       	adc	r25, r31
 936:	08 95       	ret

00000938 <strnlen>:
 938:	fc 01       	movw	r30, r24
 93a:	61 50       	subi	r22, 0x01	; 1
 93c:	70 40       	sbci	r23, 0x00	; 0
 93e:	01 90       	ld	r0, Z+
 940:	01 10       	cpse	r0, r1
 942:	d8 f7       	brcc	.-10     	; 0x93a <strnlen+0x2>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	8e 0f       	add	r24, r30
 94a:	9f 1f       	adc	r25, r31
 94c:	08 95       	ret

0000094e <fputc>:
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	fb 01       	movw	r30, r22
 958:	23 81       	ldd	r18, Z+3	; 0x03
 95a:	21 fd       	sbrc	r18, 1
 95c:	03 c0       	rjmp	.+6      	; 0x964 <fputc+0x16>
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	9f ef       	ldi	r25, 0xFF	; 255
 962:	28 c0       	rjmp	.+80     	; 0x9b4 <fputc+0x66>
 964:	22 ff       	sbrs	r18, 2
 966:	16 c0       	rjmp	.+44     	; 0x994 <fputc+0x46>
 968:	46 81       	ldd	r20, Z+6	; 0x06
 96a:	57 81       	ldd	r21, Z+7	; 0x07
 96c:	24 81       	ldd	r18, Z+4	; 0x04
 96e:	35 81       	ldd	r19, Z+5	; 0x05
 970:	42 17       	cp	r20, r18
 972:	53 07       	cpc	r21, r19
 974:	44 f4       	brge	.+16     	; 0x986 <fputc+0x38>
 976:	a0 81       	ld	r26, Z
 978:	b1 81       	ldd	r27, Z+1	; 0x01
 97a:	9d 01       	movw	r18, r26
 97c:	2f 5f       	subi	r18, 0xFF	; 255
 97e:	3f 4f       	sbci	r19, 0xFF	; 255
 980:	31 83       	std	Z+1, r19	; 0x01
 982:	20 83       	st	Z, r18
 984:	8c 93       	st	X, r24
 986:	26 81       	ldd	r18, Z+6	; 0x06
 988:	37 81       	ldd	r19, Z+7	; 0x07
 98a:	2f 5f       	subi	r18, 0xFF	; 255
 98c:	3f 4f       	sbci	r19, 0xFF	; 255
 98e:	37 83       	std	Z+7, r19	; 0x07
 990:	26 83       	std	Z+6, r18	; 0x06
 992:	10 c0       	rjmp	.+32     	; 0x9b4 <fputc+0x66>
 994:	eb 01       	movw	r28, r22
 996:	09 2f       	mov	r16, r25
 998:	18 2f       	mov	r17, r24
 99a:	00 84       	ldd	r0, Z+8	; 0x08
 99c:	f1 85       	ldd	r31, Z+9	; 0x09
 99e:	e0 2d       	mov	r30, r0
 9a0:	09 95       	icall
 9a2:	89 2b       	or	r24, r25
 9a4:	e1 f6       	brne	.-72     	; 0x95e <fputc+0x10>
 9a6:	8e 81       	ldd	r24, Y+6	; 0x06
 9a8:	9f 81       	ldd	r25, Y+7	; 0x07
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	9f 83       	std	Y+7, r25	; 0x07
 9ae:	8e 83       	std	Y+6, r24	; 0x06
 9b0:	81 2f       	mov	r24, r17
 9b2:	90 2f       	mov	r25, r16
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <__ultoa_invert>:
 9be:	fa 01       	movw	r30, r20
 9c0:	aa 27       	eor	r26, r26
 9c2:	28 30       	cpi	r18, 0x08	; 8
 9c4:	61 f1       	breq	.+88     	; 0xa1e <__ultoa_invert+0x60>
 9c6:	20 31       	cpi	r18, 0x10	; 16
 9c8:	91 f1       	breq	.+100    	; 0xa2e <__ultoa_invert+0x70>
 9ca:	e8 94       	clt
 9cc:	6f 93       	push	r22
 9ce:	6e 7f       	andi	r22, 0xFE	; 254
 9d0:	6e 5f       	subi	r22, 0xFE	; 254
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	af 4f       	sbci	r26, 0xFF	; 255
 9da:	b1 e0       	ldi	r27, 0x01	; 1
 9dc:	40 d0       	rcall	.+128    	; 0xa5e <__ultoa_invert+0xa0>
 9de:	b4 e0       	ldi	r27, 0x04	; 4
 9e0:	3e d0       	rcall	.+124    	; 0xa5e <__ultoa_invert+0xa0>
 9e2:	67 0f       	add	r22, r23
 9e4:	78 1f       	adc	r23, r24
 9e6:	89 1f       	adc	r24, r25
 9e8:	9a 1f       	adc	r25, r26
 9ea:	a1 1d       	adc	r26, r1
 9ec:	68 0f       	add	r22, r24
 9ee:	79 1f       	adc	r23, r25
 9f0:	8a 1f       	adc	r24, r26
 9f2:	91 1d       	adc	r25, r1
 9f4:	a1 1d       	adc	r26, r1
 9f6:	6a 0f       	add	r22, r26
 9f8:	71 1d       	adc	r23, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	91 1d       	adc	r25, r1
 9fe:	a1 1d       	adc	r26, r1
 a00:	22 d0       	rcall	.+68     	; 0xa46 <__ultoa_invert+0x88>
 a02:	09 f4       	brne	.+2      	; 0xa06 <__ultoa_invert+0x48>
 a04:	68 94       	set
 a06:	3f 91       	pop	r19
 a08:	06 2e       	mov	r0, r22
 a0a:	00 0c       	add	r0, r0
 a0c:	30 19       	sub	r19, r0
 a0e:	00 0c       	add	r0, r0
 a10:	00 0c       	add	r0, r0
 a12:	30 19       	sub	r19, r0
 a14:	30 5d       	subi	r19, 0xD0	; 208
 a16:	31 93       	st	Z+, r19
 a18:	ce f6       	brtc	.-78     	; 0x9cc <__ultoa_invert+0xe>
 a1a:	cf 01       	movw	r24, r30
 a1c:	08 95       	ret
 a1e:	46 2f       	mov	r20, r22
 a20:	47 70       	andi	r20, 0x07	; 7
 a22:	40 5d       	subi	r20, 0xD0	; 208
 a24:	41 93       	st	Z+, r20
 a26:	b3 e0       	ldi	r27, 0x03	; 3
 a28:	0f d0       	rcall	.+30     	; 0xa48 <__ultoa_invert+0x8a>
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__ultoa_invert+0x60>
 a2c:	f6 cf       	rjmp	.-20     	; 0xa1a <__ultoa_invert+0x5c>
 a2e:	46 2f       	mov	r20, r22
 a30:	4f 70       	andi	r20, 0x0F	; 15
 a32:	40 5d       	subi	r20, 0xD0	; 208
 a34:	4a 33       	cpi	r20, 0x3A	; 58
 a36:	18 f0       	brcs	.+6      	; 0xa3e <__ultoa_invert+0x80>
 a38:	49 5d       	subi	r20, 0xD9	; 217
 a3a:	31 fd       	sbrc	r19, 1
 a3c:	40 52       	subi	r20, 0x20	; 32
 a3e:	41 93       	st	Z+, r20
 a40:	02 d0       	rcall	.+4      	; 0xa46 <__ultoa_invert+0x88>
 a42:	a9 f7       	brne	.-22     	; 0xa2e <__ultoa_invert+0x70>
 a44:	ea cf       	rjmp	.-44     	; 0xa1a <__ultoa_invert+0x5c>
 a46:	b4 e0       	ldi	r27, 0x04	; 4
 a48:	a6 95       	lsr	r26
 a4a:	97 95       	ror	r25
 a4c:	87 95       	ror	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	ba 95       	dec	r27
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__ultoa_invert+0x8a>
 a56:	00 97       	sbiw	r24, 0x00	; 0
 a58:	61 05       	cpc	r22, r1
 a5a:	71 05       	cpc	r23, r1
 a5c:	08 95       	ret
 a5e:	9b 01       	movw	r18, r22
 a60:	ac 01       	movw	r20, r24
 a62:	0a 2e       	mov	r0, r26
 a64:	06 94       	lsr	r0
 a66:	57 95       	ror	r21
 a68:	47 95       	ror	r20
 a6a:	37 95       	ror	r19
 a6c:	27 95       	ror	r18
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0xa6>
 a72:	62 0f       	add	r22, r18
 a74:	73 1f       	adc	r23, r19
 a76:	84 1f       	adc	r24, r20
 a78:	95 1f       	adc	r25, r21
 a7a:	a0 1d       	adc	r26, r0
 a7c:	08 95       	ret

00000a7e <__mulqi3>:
 a7e:	00 24       	eor	r0, r0

00000a80 <__mulqi3_loop>:
 a80:	80 fd       	sbrc	r24, 0
 a82:	06 0e       	add	r0, r22
 a84:	66 0f       	add	r22, r22
 a86:	11 f0       	breq	.+4      	; 0xa8c <__mulqi3_exit>
 a88:	86 95       	lsr	r24
 a8a:	d1 f7       	brne	.-12     	; 0xa80 <__mulqi3_loop>

00000a8c <__mulqi3_exit>:
 a8c:	80 2d       	mov	r24, r0
 a8e:	08 95       	ret

00000a90 <__prologue_saves__>:
 a90:	2f 92       	push	r2
 a92:	3f 92       	push	r3
 a94:	4f 92       	push	r4
 a96:	5f 92       	push	r5
 a98:	6f 92       	push	r6
 a9a:	7f 92       	push	r7
 a9c:	8f 92       	push	r8
 a9e:	9f 92       	push	r9
 aa0:	af 92       	push	r10
 aa2:	bf 92       	push	r11
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
 ab8:	ca 1b       	sub	r28, r26
 aba:	db 0b       	sbc	r29, r27
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	f8 94       	cli
 ac0:	de bf       	out	0x3e, r29	; 62
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	cd bf       	out	0x3d, r28	; 61
 ac6:	09 94       	ijmp

00000ac8 <__epilogue_restores__>:
 ac8:	2a 88       	ldd	r2, Y+18	; 0x12
 aca:	39 88       	ldd	r3, Y+17	; 0x11
 acc:	48 88       	ldd	r4, Y+16	; 0x10
 ace:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad8:	aa 84       	ldd	r10, Y+10	; 0x0a
 ada:	b9 84       	ldd	r11, Y+9	; 0x09
 adc:	c8 84       	ldd	r12, Y+8	; 0x08
 ade:	df 80       	ldd	r13, Y+7	; 0x07
 ae0:	ee 80       	ldd	r14, Y+6	; 0x06
 ae2:	fd 80       	ldd	r15, Y+5	; 0x05
 ae4:	0c 81       	ldd	r16, Y+4	; 0x04
 ae6:	1b 81       	ldd	r17, Y+3	; 0x03
 ae8:	aa 81       	ldd	r26, Y+2	; 0x02
 aea:	b9 81       	ldd	r27, Y+1	; 0x01
 aec:	ce 0f       	add	r28, r30
 aee:	d1 1d       	adc	r29, r1
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	de bf       	out	0x3e, r29	; 62
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	cd bf       	out	0x3d, r28	; 61
 afa:	ed 01       	movw	r28, r26
 afc:	08 95       	ret

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
