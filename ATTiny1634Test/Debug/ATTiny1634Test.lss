
ATTiny1634Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000b64  00000bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000146  00800122  00800122  00000c1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003ce  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000150  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007261  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041b  00000000  00000000  00008a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000026a8  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_24>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 32       	cpi	r26, 0x22	; 34
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a2 e2       	ldi	r26, 0x22	; 34
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 36       	cpi	r26, 0x68	; 104
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

unsigned char bufUSIDR[4];
uint_fast32_t results[ADC_INPUTS];
unsigned char spiFlags;
char genBuf[256];
int main(void) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	setup();
  b6:	0e 94 60 00 	call	0xc0	; 0xc0 <setup>
    while (1) {
		loop();
  ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <loop>
    }
  be:	fd cf       	rjmp	.-6      	; 0xba <main+0xc>

000000c0 <setup>:
}

void setup(void) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	// SPI setup
	//USICR = (1<<USIOIE) | (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC); //counter overflow interrupt enable, and 3 wire mode, external register clk
	USICR = (1<<USIOIE) | (1<<USIWM0) | (1<<USICS1) | (1<<USICS0) |(1<<USICLK);
  c8:	8a e4       	ldi	r24, 0x4A	; 74
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2e e5       	ldi	r18, 0x5E	; 94
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18

	TCCR0A = (1<<WGM01) | 0x02;
  d2:	8b e3       	ldi	r24, 0x3B	; 59
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	OCR0A = 31;
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2f e1       	ldi	r18, 0x1F	; 31
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
	
	USART_Init((unsigned int) 115200);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	92 ec       	ldi	r25, 0xC2	; 194
  ea:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART_Init>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <loop>:

void loop(void) {
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	28 97       	sbiw	r28, 0x08	; 8
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	unsigned char junkBytes[] = { 0x80, 0xFF, 0x00, 0x7F };
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a 83       	std	Y+2, r24	; 0x02
 110:	1b 82       	std	Y+3, r1	; 0x03
 112:	8f e7       	ldi	r24, 0x7F	; 127
 114:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char returnString[4];
	spiTransferMulti(&junkBytes[0], &returnString[0], 4);
 116:	ce 01       	movw	r24, r28
 118:	05 96       	adiw	r24, 0x05	; 5
 11a:	44 e0       	ldi	r20, 0x04	; 4
 11c:	bc 01       	movw	r22, r24
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0e 94 ed 01 	call	0x3da	; 0x3da <spiTransferMulti>
	readAllInputs();
 126:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <readAllInputs>
}
 12a:	28 96       	adiw	r28, 0x08	; 8
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <serialSendByte>:

void serialSendByte(char b) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	89 83       	std	Y+1, r24	; 0x01
	
}
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <serialMsg>:

void serialMsg(char *msg) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <serialMsg+0x6>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
	while (*msg) {
 15e:	0b c0       	rjmp	.+22     	; 0x176 <serialMsg+0x26>
		serialSendByte(*msg++);
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
 164:	9c 01       	movw	r18, r24
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	3a 83       	std	Y+2, r19	; 0x02
 16c:	29 83       	std	Y+1, r18	; 0x01
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	0e 94 9e 00 	call	0x13c	; 0x13c <serialSendByte>
void serialSendByte(char b) {
	
}

void serialMsg(char *msg) {
	while (*msg) {
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	fc 01       	movw	r30, r24
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	79 f7       	brne	.-34     	; 0x160 <serialMsg+0x10>
		serialSendByte(*msg++);
	}
	return;
 182:	00 00       	nop
}
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <serialMsgFmt>:

void serialMsgFmt(char *fmt, ...) {
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <serialMsgFmt+0x6>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	memset((void *) genBuf, 0, sizeof(genBuf));
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	51 e0       	ldi	r21, 0x01	; 1
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	88 e6       	ldi	r24, 0x68	; 104
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 ca 02 	call	0x594	; 0x594 <memset>
	va_list args;
	va_start(args, fmt);
 1a8:	ce 01       	movw	r24, r28
 1aa:	09 96       	adiw	r24, 0x09	; 9
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
	vsprintf(genBuf, fmt, args);
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	3a 81       	ldd	r19, Y+2	; 0x02
 1b4:	8f 81       	ldd	r24, Y+7	; 0x07
 1b6:	98 85       	ldd	r25, Y+8	; 0x08
 1b8:	a9 01       	movw	r20, r18
 1ba:	bc 01       	movw	r22, r24
 1bc:	88 e6       	ldi	r24, 0x68	; 104
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vsprintf>
	va_end(args);
	serialMsg(genBuf);
 1c4:	88 e6       	ldi	r24, 0x68	; 104
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 a8 00 	call	0x150	; 0x150 <serialMsg>
	return;
 1cc:	00 00       	nop
}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <readAllInputs>:


void readAllInputs(void) {
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t adcPin;
	for (adcPin = 1; adcPin < ADC_INPUTS; adcPin++) {
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	1a c0       	rjmp	.+52     	; 0x220 <readAllInputs+0x48>
		results[adcPin - 1] = readInput(adcPin);
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	8c 01       	movw	r16, r24
 1f4:	01 50       	subi	r16, 0x01	; 1
 1f6:	11 09       	sbc	r17, r1
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	0e 94 19 01 	call	0x232	; 0x232 <readInput>
 1fe:	dc 01       	movw	r26, r24
 200:	cb 01       	movw	r24, r22
 202:	98 01       	movw	r18, r16
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	28 5d       	subi	r18, 0xD8	; 216
 20e:	3e 4f       	sbci	r19, 0xFE	; 254
 210:	f9 01       	movw	r30, r18
 212:	80 83       	st	Z, r24
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	a2 83       	std	Z+2, r26	; 0x02
 218:	b3 83       	std	Z+3, r27	; 0x03
}


void readAllInputs(void) {
	uint8_t adcPin;
	for (adcPin = 1; adcPin < ADC_INPUTS; adcPin++) {
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	80 31       	cpi	r24, 0x10	; 16
 224:	18 f3       	brcs	.-58     	; 0x1ec <readAllInputs+0x14>
		results[adcPin - 1] = readInput(adcPin);
	}
}
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <readInput>:

uint_fast32_t readInput(uint8_t adcPin) {
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <readInput+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <readInput+0x8>
 23a:	00 d0       	rcall	.+0      	; 0x23c <readInput+0xa>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	8e 83       	std	Y+6, r24	; 0x06
	uint_fast32_t result;
	adcPin -= 1; // ie 16 Becomes 15
 242:	8e 81       	ldd	r24, Y+6	; 0x06
 244:	81 50       	subi	r24, 0x01	; 1
 246:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t muxAddr;
	// Set 0b10 mandatory, 0bXX1 to select new address
	muxAddr = 0xA0;
 248:	80 ea       	ldi	r24, 0xA0	; 160
 24a:	89 83       	std	Y+1, r24	; 0x01
	if (adcPin & 0x1) {
 24c:	8e 81       	ldd	r24, Y+6	; 0x06
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	81 70       	andi	r24, 0x01	; 1
 254:	99 27       	eor	r25, r25
 256:	89 2b       	or	r24, r25
 258:	21 f0       	breq	.+8      	; 0x262 <readInput+0x30>
		// Set SGL and SIGN to TRUE
		muxAddr |= 0x18;
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	88 61       	ori	r24, 0x18	; 24
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	03 c0       	rjmp	.+6      	; 0x268 <readInput+0x36>
	}
	else {
		// Set SGL to TRUE and SIGN to FALSE
		muxAddr |= 0x10;
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	80 61       	ori	r24, 0x10	; 16
 266:	89 83       	std	Y+1, r24	; 0x01
	}
	// Throw away the LSB
	adcPin = adcPin >> 1;
 268:	8e 81       	ldd	r24, Y+6	; 0x06
 26a:	86 95       	lsr	r24
 26c:	8e 83       	std	Y+6, r24	; 0x06
	// OR it with 1_0_EN_SGL_SIGN -- we now have the translated mux address
	muxAddr |= adcPin;
 26e:	99 81       	ldd	r25, Y+1	; 0x01
 270:	8e 81       	ldd	r24, Y+6	; 0x06
 272:	89 2b       	or	r24, r25
 274:	89 83       	std	Y+1, r24	; 0x01
	#ifdef ADC_LTC2418
	result = readInput_LTC2418(muxAddr);
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	0e 94 53 01 	call	0x2a6	; 0x2a6 <readInput_LTC2418>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	8a 83       	std	Y+2, r24	; 0x02
 282:	9b 83       	std	Y+3, r25	; 0x03
 284:	ac 83       	std	Y+4, r26	; 0x04
 286:	bd 83       	std	Y+5, r27	; 0x05
	#endif
	return(result);
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	9b 81       	ldd	r25, Y+3	; 0x03
 28c:	ac 81       	ldd	r26, Y+4	; 0x04
 28e:	bd 81       	ldd	r27, Y+5	; 0x05

}
 290:	bc 01       	movw	r22, r24
 292:	cd 01       	movw	r24, r26
 294:	26 96       	adiw	r28, 0x06	; 6
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <readInput_LTC2418>:

uint_fast32_t readInput_LTC2418(uint8_t muxAddr) {
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	2e 97       	sbiw	r28, 0x0e	; 14
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	8e 87       	std	Y+14, r24	; 0x0e
	unsigned char spiMsg[4] = {muxAddr,0x0,0x0,0x0};
 2bc:	8e 85       	ldd	r24, Y+14	; 0x0e
 2be:	8e 83       	std	Y+6, r24	; 0x06
 2c0:	1f 82       	std	Y+7, r1	; 0x07
 2c2:	18 86       	std	Y+8, r1	; 0x08
 2c4:	19 86       	std	Y+9, r1	; 0x09
	unsigned char spiRetMsg[4];
	unsigned char x;
	uint_fast32_t rVal = 0;
 2c6:	1a 82       	std	Y+2, r1	; 0x02
 2c8:	1b 82       	std	Y+3, r1	; 0x03
 2ca:	1c 82       	std	Y+4, r1	; 0x04
 2cc:	1d 82       	std	Y+5, r1	; 0x05
	spiTransferMulti(spiMsg, spiRetMsg, 4);
 2ce:	9e 01       	movw	r18, r28
 2d0:	26 5f       	subi	r18, 0xF6	; 246
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	ce 01       	movw	r24, r28
 2d6:	06 96       	adiw	r24, 0x06	; 6
 2d8:	44 e0       	ldi	r20, 0x04	; 4
 2da:	b9 01       	movw	r22, r18
 2dc:	0e 94 ed 01 	call	0x3da	; 0x3da <spiTransferMulti>
	spiFlags |= SPI_WAIT_MSG;
 2e0:	80 91 27 01 	lds	r24, 0x0127
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	80 93 27 01 	sts	0x0127, r24
	while (!(spiFlags & SPI_COMPLETE_MSG ));
 2ea:	00 00       	nop
 2ec:	80 91 27 01 	lds	r24, 0x0127
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	88 70       	andi	r24, 0x08	; 8
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	c1 f3       	breq	.-16     	; 0x2ec <readInput_LTC2418+0x46>
	spiFlags &= ~SPI_WAIT_MSG;
 2fc:	80 91 27 01 	lds	r24, 0x0127
 300:	8e 7f       	andi	r24, 0xFE	; 254
 302:	80 93 27 01 	sts	0x0127, r24
	
	for (x = 0; x < 4; x++) {
 306:	19 82       	std	Y+1, r1	; 0x01
 308:	2a c0       	rjmp	.+84     	; 0x35e <readInput_LTC2418+0xb8>
		rVal |= bufUSIDR[x] << (8 * x);
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	88 2f       	mov	r24, r24
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	8d 5d       	subi	r24, 0xDD	; 221
 312:	9e 4f       	sbci	r25, 0xFE	; 254
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	22 2f       	mov	r18, r18
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	02 c0       	rjmp	.+4      	; 0x334 <readInput_LTC2418+0x8e>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	2a 95       	dec	r18
 336:	e2 f7       	brpl	.-8      	; 0x330 <readInput_LTC2418+0x8a>
 338:	09 2e       	mov	r0, r25
 33a:	00 0c       	add	r0, r0
 33c:	aa 0b       	sbc	r26, r26
 33e:	bb 0b       	sbc	r27, r27
 340:	2a 81       	ldd	r18, Y+2	; 0x02
 342:	3b 81       	ldd	r19, Y+3	; 0x03
 344:	4c 81       	ldd	r20, Y+4	; 0x04
 346:	5d 81       	ldd	r21, Y+5	; 0x05
 348:	82 2b       	or	r24, r18
 34a:	93 2b       	or	r25, r19
 34c:	a4 2b       	or	r26, r20
 34e:	b5 2b       	or	r27, r21
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	9b 83       	std	Y+3, r25	; 0x03
 354:	ac 83       	std	Y+4, r26	; 0x04
 356:	bd 83       	std	Y+5, r27	; 0x05
	spiTransferMulti(spiMsg, spiRetMsg, 4);
	spiFlags |= SPI_WAIT_MSG;
	while (!(spiFlags & SPI_COMPLETE_MSG ));
	spiFlags &= ~SPI_WAIT_MSG;
	
	for (x = 0; x < 4; x++) {
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	84 30       	cpi	r24, 0x04	; 4
 362:	98 f2       	brcs	.-90     	; 0x30a <readInput_LTC2418+0x64>
		rVal |= bufUSIDR[x] << (8 * x);
	}
	x = (bufUSIDR[3] & 0x3E) >> 1;
 364:	80 91 26 01 	lds	r24, 0x0126
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	8e 73       	andi	r24, 0x3E	; 62
 36e:	99 27       	eor	r25, r25
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	89 83       	std	Y+1, r24	; 0x01
	if (x == muxAddr) {
 376:	99 81       	ldd	r25, Y+1	; 0x01
 378:	8e 85       	ldd	r24, Y+14	; 0x0e
 37a:	98 17       	cp	r25, r24
 37c:	29 f4       	brne	.+10     	; 0x388 <readInput_LTC2418+0xe2>
		return(rVal);
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	ac 81       	ldd	r26, Y+4	; 0x04
 384:	bd 81       	ldd	r27, Y+5	; 0x05
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <readInput_LTC2418+0x11e>
	}
	else {
		serialMsgFmt("x did not equal muxAddr.. %x %x\n", x, muxAddr);
 388:	8e 85       	ldd	r24, Y+14	; 0x0e
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	88 2f       	mov	r24, r24
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	43 2f       	mov	r20, r19
 396:	4f 93       	push	r20
 398:	2f 93       	push	r18
 39a:	29 2f       	mov	r18, r25
 39c:	2f 93       	push	r18
 39e:	8f 93       	push	r24
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	89 2f       	mov	r24, r25
 3a6:	8f 93       	push	r24
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	8f 93       	push	r24
 3ae:	0e 94 c7 00 	call	0x18e	; 0x18e <serialMsgFmt>
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
	}
	return(0);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	dc 01       	movw	r26, r24
}
 3c4:	bc 01       	movw	r22, r24
 3c6:	cd 01       	movw	r24, r26
 3c8:	2e 96       	adiw	r28, 0x0e	; 14
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <spiTransferMulti>:


uint8_t spiTransferMulti(unsigned char *string, unsigned char *retString, unsigned char len) {
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <spiTransferMulti+0xa>
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <spiTransferMulti+0xc>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <spiTransferMulti+0xe>
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	9b 83       	std	Y+3, r25	; 0x03
 3ee:	8a 83       	std	Y+2, r24	; 0x02
 3f0:	7d 83       	std	Y+5, r23	; 0x05
 3f2:	6c 83       	std	Y+4, r22	; 0x04
 3f4:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char x = len;
 3f6:	8e 81       	ldd	r24, Y+6	; 0x06
 3f8:	89 83       	std	Y+1, r24	; 0x01
	while (x) {
 3fa:	21 c0       	rjmp	.+66     	; 0x43e <spiTransferMulti+0x64>
		retString[x-1] = spiTransfer8(string[len - x]);
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	2c 81       	ldd	r18, Y+4	; 0x04
 406:	3d 81       	ldd	r19, Y+5	; 0x05
 408:	89 01       	movw	r16, r18
 40a:	08 0f       	add	r16, r24
 40c:	19 1f       	adc	r17, r25
 40e:	8e 81       	ldd	r24, Y+6	; 0x06
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	a9 01       	movw	r20, r18
 41c:	48 1b       	sub	r20, r24
 41e:	59 0b       	sbc	r21, r25
 420:	ca 01       	movw	r24, r20
 422:	9c 01       	movw	r18, r24
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	9b 81       	ldd	r25, Y+3	; 0x03
 428:	82 0f       	add	r24, r18
 42a:	93 1f       	adc	r25, r19
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	0e 94 2e 02 	call	0x45c	; 0x45c <spiTransfer8>
 434:	f8 01       	movw	r30, r16
 436:	80 83       	st	Z, r24
		x--;
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	81 50       	subi	r24, 0x01	; 1
 43c:	89 83       	std	Y+1, r24	; 0x01
}


uint8_t spiTransferMulti(unsigned char *string, unsigned char *retString, unsigned char len) {
	unsigned char x = len;
	while (x) {
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	88 23       	and	r24, r24
 442:	e1 f6       	brne	.-72     	; 0x3fc <spiTransferMulti+0x22>
		retString[x-1] = spiTransfer8(string[len - x]);
		x--;
	}
	return(x);
 444:	89 81       	ldd	r24, Y+1	; 0x01
}
 446:	26 96       	adiw	r28, 0x06	; 6
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <spiTransfer8>:

uint8_t spiTransfer8(uint8_t data) {
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	1f 92       	push	r1
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	89 83       	std	Y+1, r24	; 0x01
	USIDR = data;
 468:	8c e4       	ldi	r24, 0x4C	; 76
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	29 81       	ldd	r18, Y+1	; 0x01
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
	USISR = _BV(USIOIF); // clear flag
 472:	8b e4       	ldi	r24, 0x4B	; 75
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	20 e4       	ldi	r18, 0x40	; 64
 478:	fc 01       	movw	r30, r24
 47a:	20 83       	st	Z, r18
	while ( (USISR & _BV(USIOIF)) == 0 ) {
 47c:	05 c0       	rjmp	.+10     	; 0x488 <spiTransfer8+0x2c>
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
 47e:	8a e4       	ldi	r24, 0x4A	; 74
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	2b e1       	ldi	r18, 0x1B	; 27
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
}

uint8_t spiTransfer8(uint8_t data) {
	USIDR = data;
	USISR = _BV(USIOIF); // clear flag
	while ( (USISR & _BV(USIOIF)) == 0 ) {
 488:	8b e4       	ldi	r24, 0x4B	; 75
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	80 81       	ld	r24, Z
 490:	88 2f       	mov	r24, r24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	80 74       	andi	r24, 0x40	; 64
 496:	99 27       	eor	r25, r25
 498:	89 2b       	or	r24, r25
 49a:	89 f3       	breq	.-30     	; 0x47e <spiTransfer8+0x22>
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
	}
	return USIDR;
 49c:	8c e4       	ldi	r24, 0x4C	; 76
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 81       	ld	r24, Z
	USISR = (1<<USIOIF);             // clear IRQ
	USICR = (1<<USIWM0)|(1<<USICS0); // start clock
	while ((USISR & (1<<USIOIF)) == 0); // send 8 bits
	USICR = (1<<USIWM0)|(0<<USICS0); // stop clock after
	*/
}
 4a4:	0f 90       	pop	r0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <USART_Init>:

void USART_Init( unsigned int baud ) {
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <USART_Init+0x6>
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	9a 83       	std	Y+2, r25	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	29 81       	ldd	r18, Y+1	; 0x01
 4c0:	3a 81       	ldd	r19, Y+2	; 0x02
 4c2:	23 2f       	mov	r18, r19
 4c4:	33 27       	eor	r19, r19
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)baud;
 4ca:	81 e4       	ldi	r24, 0x41	; 65
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	29 81       	ldd	r18, Y+1	; 0x01
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 4d4:	85 e4       	ldi	r24, 0x45	; 69
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	28 e1       	ldi	r18, 0x18	; 24
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 4de:	84 e4       	ldi	r24, 0x44	; 68
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	2e e0       	ldi	r18, 0x0E	; 14
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
}
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <__vector_24>:


ISR(USI_OVERFLOW_vect) {
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	00 90 5f 00 	lds	r0, 0x005F
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	// We got a byte on SPI!
	static uint8_t x = 0;
	TIMSK &= ~(1<<OCIE0A);
 512:	8a e5       	ldi	r24, 0x5A	; 90
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	2a e5       	ldi	r18, 0x5A	; 90
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	20 81       	ld	r18, Z
 51e:	2e 7f       	andi	r18, 0xFE	; 254
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
	// Copy USIDR to buffer to prevent overwrite on next transfer.
	bufUSIDR[x] = USIDR;
 524:	80 91 22 01 	lds	r24, 0x0122
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	2c e4       	ldi	r18, 0x4C	; 76
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	20 81       	ld	r18, Z
 534:	8d 5d       	subi	r24, 0xDD	; 221
 536:	9e 4f       	sbci	r25, 0xFE	; 254
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
 53c:	8b e4       	ldi	r24, 0x4B	; 75
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	20 e4       	ldi	r18, 0x40	; 64
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
	if (spiFlags & SPI_WAIT_MSG) {
 546:	80 91 27 01 	lds	r24, 0x0127
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	81 70       	andi	r24, 0x01	; 1
 550:	99 27       	eor	r25, r25
 552:	89 2b       	or	r24, r25
 554:	89 f0       	breq	.+34     	; 0x578 <__stack+0x79>
		if (x < 3) ++x;
 556:	80 91 22 01 	lds	r24, 0x0122
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	30 f4       	brcc	.+12     	; 0x56a <__stack+0x6b>
 55e:	80 91 22 01 	lds	r24, 0x0122
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 22 01 	sts	0x0122, r24
 568:	07 c0       	rjmp	.+14     	; 0x578 <__stack+0x79>
		else {
			spiFlags |= SPI_COMPLETE_MSG;
 56a:	80 91 27 01 	lds	r24, 0x0127
 56e:	88 60       	ori	r24, 0x08	; 8
 570:	80 93 27 01 	sts	0x0127, r24
			x = 0;
 574:	10 92 22 01 	sts	0x0122, r1
		}
	}
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	00 92 5f 00 	sts	0x005F, r0
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <memset>:
 594:	dc 01       	movw	r26, r24
 596:	01 c0       	rjmp	.+2      	; 0x59a <memset+0x6>
 598:	6d 93       	st	X+, r22
 59a:	41 50       	subi	r20, 0x01	; 1
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	e0 f7       	brcc	.-8      	; 0x598 <memset+0x4>
 5a0:	08 95       	ret

000005a2 <vsprintf>:
 5a2:	ae e0       	ldi	r26, 0x0E	; 14
 5a4:	b0 e0       	ldi	r27, 0x00	; 0
 5a6:	e7 ed       	ldi	r30, 0xD7	; 215
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__prologue_saves__+0x1c>
 5ae:	8c 01       	movw	r16, r24
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	8c 83       	std	Y+4, r24	; 0x04
 5b4:	1a 83       	std	Y+2, r17	; 0x02
 5b6:	09 83       	std	Y+1, r16	; 0x01
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	9f e7       	ldi	r25, 0x7F	; 127
 5bc:	9e 83       	std	Y+6, r25	; 0x06
 5be:	8d 83       	std	Y+5, r24	; 0x05
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <vfprintf>
 5c8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ca:	38 85       	ldd	r19, Y+8	; 0x08
 5cc:	f8 01       	movw	r30, r16
 5ce:	e2 0f       	add	r30, r18
 5d0:	f3 1f       	adc	r31, r19
 5d2:	10 82       	st	Z, r1
 5d4:	2e 96       	adiw	r28, 0x0e	; 14
 5d6:	e4 e0       	ldi	r30, 0x04	; 4
 5d8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__epilogue_restores__+0x1c>

000005dc <vfprintf>:
 5dc:	ac e0       	ldi	r26, 0x0C	; 12
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e4 ef       	ldi	r30, 0xF4	; 244
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__prologue_saves__>
 5e8:	7c 01       	movw	r14, r24
 5ea:	6b 01       	movw	r12, r22
 5ec:	8a 01       	movw	r16, r20
 5ee:	fc 01       	movw	r30, r24
 5f0:	17 82       	std	Z+7, r1	; 0x07
 5f2:	16 82       	std	Z+6, r1	; 0x06
 5f4:	83 81       	ldd	r24, Z+3	; 0x03
 5f6:	81 ff       	sbrs	r24, 1
 5f8:	bf c1       	rjmp	.+894    	; 0x978 <vfprintf+0x39c>
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	4c 01       	movw	r8, r24
 600:	f7 01       	movw	r30, r14
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	f6 01       	movw	r30, r12
 606:	93 fd       	sbrc	r25, 3
 608:	85 91       	lpm	r24, Z+
 60a:	93 ff       	sbrs	r25, 3
 60c:	81 91       	ld	r24, Z+
 60e:	6f 01       	movw	r12, r30
 610:	88 23       	and	r24, r24
 612:	09 f4       	brne	.+2      	; 0x616 <vfprintf+0x3a>
 614:	ad c1       	rjmp	.+858    	; 0x970 <vfprintf+0x394>
 616:	85 32       	cpi	r24, 0x25	; 37
 618:	39 f4       	brne	.+14     	; 0x628 <vfprintf+0x4c>
 61a:	93 fd       	sbrc	r25, 3
 61c:	85 91       	lpm	r24, Z+
 61e:	93 ff       	sbrs	r25, 3
 620:	81 91       	ld	r24, Z+
 622:	6f 01       	movw	r12, r30
 624:	85 32       	cpi	r24, 0x25	; 37
 626:	29 f4       	brne	.+10     	; 0x632 <vfprintf+0x56>
 628:	b7 01       	movw	r22, r14
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 630:	e7 cf       	rjmp	.-50     	; 0x600 <vfprintf+0x24>
 632:	51 2c       	mov	r5, r1
 634:	31 2c       	mov	r3, r1
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	20 32       	cpi	r18, 0x20	; 32
 63a:	a0 f4       	brcc	.+40     	; 0x664 <vfprintf+0x88>
 63c:	8b 32       	cpi	r24, 0x2B	; 43
 63e:	69 f0       	breq	.+26     	; 0x65a <vfprintf+0x7e>
 640:	30 f4       	brcc	.+12     	; 0x64e <vfprintf+0x72>
 642:	80 32       	cpi	r24, 0x20	; 32
 644:	59 f0       	breq	.+22     	; 0x65c <vfprintf+0x80>
 646:	83 32       	cpi	r24, 0x23	; 35
 648:	69 f4       	brne	.+26     	; 0x664 <vfprintf+0x88>
 64a:	20 61       	ori	r18, 0x10	; 16
 64c:	2e c0       	rjmp	.+92     	; 0x6aa <vfprintf+0xce>
 64e:	8d 32       	cpi	r24, 0x2D	; 45
 650:	39 f0       	breq	.+14     	; 0x660 <vfprintf+0x84>
 652:	80 33       	cpi	r24, 0x30	; 48
 654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0x88>
 656:	21 60       	ori	r18, 0x01	; 1
 658:	28 c0       	rjmp	.+80     	; 0x6aa <vfprintf+0xce>
 65a:	22 60       	ori	r18, 0x02	; 2
 65c:	24 60       	ori	r18, 0x04	; 4
 65e:	25 c0       	rjmp	.+74     	; 0x6aa <vfprintf+0xce>
 660:	28 60       	ori	r18, 0x08	; 8
 662:	23 c0       	rjmp	.+70     	; 0x6aa <vfprintf+0xce>
 664:	27 fd       	sbrc	r18, 7
 666:	29 c0       	rjmp	.+82     	; 0x6ba <vfprintf+0xde>
 668:	30 ed       	ldi	r19, 0xD0	; 208
 66a:	38 0f       	add	r19, r24
 66c:	3a 30       	cpi	r19, 0x0A	; 10
 66e:	88 f4       	brcc	.+34     	; 0x692 <vfprintf+0xb6>
 670:	26 ff       	sbrs	r18, 6
 672:	07 c0       	rjmp	.+14     	; 0x682 <vfprintf+0xa6>
 674:	85 2d       	mov	r24, r5
 676:	6a e0       	ldi	r22, 0x0A	; 10
 678:	0e 94 70 05 	call	0xae0	; 0xae0 <__mulqi3>
 67c:	58 2e       	mov	r5, r24
 67e:	53 0e       	add	r5, r19
 680:	14 c0       	rjmp	.+40     	; 0x6aa <vfprintf+0xce>
 682:	83 2d       	mov	r24, r3
 684:	6a e0       	ldi	r22, 0x0A	; 10
 686:	0e 94 70 05 	call	0xae0	; 0xae0 <__mulqi3>
 68a:	38 2e       	mov	r3, r24
 68c:	33 0e       	add	r3, r19
 68e:	20 62       	ori	r18, 0x20	; 32
 690:	0c c0       	rjmp	.+24     	; 0x6aa <vfprintf+0xce>
 692:	8e 32       	cpi	r24, 0x2E	; 46
 694:	21 f4       	brne	.+8      	; 0x69e <vfprintf+0xc2>
 696:	26 fd       	sbrc	r18, 6
 698:	6b c1       	rjmp	.+726    	; 0x970 <vfprintf+0x394>
 69a:	20 64       	ori	r18, 0x40	; 64
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <vfprintf+0xce>
 69e:	8c 36       	cpi	r24, 0x6C	; 108
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <vfprintf+0xca>
 6a2:	20 68       	ori	r18, 0x80	; 128
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <vfprintf+0xce>
 6a6:	88 36       	cpi	r24, 0x68	; 104
 6a8:	41 f4       	brne	.+16     	; 0x6ba <vfprintf+0xde>
 6aa:	f6 01       	movw	r30, r12
 6ac:	93 fd       	sbrc	r25, 3
 6ae:	85 91       	lpm	r24, Z+
 6b0:	93 ff       	sbrs	r25, 3
 6b2:	81 91       	ld	r24, Z+
 6b4:	6f 01       	movw	r12, r30
 6b6:	81 11       	cpse	r24, r1
 6b8:	bf cf       	rjmp	.-130    	; 0x638 <vfprintf+0x5c>
 6ba:	98 2f       	mov	r25, r24
 6bc:	9f 7d       	andi	r25, 0xDF	; 223
 6be:	95 54       	subi	r25, 0x45	; 69
 6c0:	93 30       	cpi	r25, 0x03	; 3
 6c2:	28 f4       	brcc	.+10     	; 0x6ce <vfprintf+0xf2>
 6c4:	0c 5f       	subi	r16, 0xFC	; 252
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	ff e3       	ldi	r31, 0x3F	; 63
 6ca:	f9 83       	std	Y+1, r31	; 0x01
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <vfprintf+0x10c>
 6ce:	83 36       	cpi	r24, 0x63	; 99
 6d0:	31 f0       	breq	.+12     	; 0x6de <vfprintf+0x102>
 6d2:	83 37       	cpi	r24, 0x73	; 115
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <vfprintf+0x116>
 6d6:	83 35       	cpi	r24, 0x53	; 83
 6d8:	09 f0       	breq	.+2      	; 0x6dc <vfprintf+0x100>
 6da:	5b c0       	rjmp	.+182    	; 0x792 <vfprintf+0x1b6>
 6dc:	22 c0       	rjmp	.+68     	; 0x722 <vfprintf+0x146>
 6de:	f8 01       	movw	r30, r16
 6e0:	80 81       	ld	r24, Z
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	0e 5f       	subi	r16, 0xFE	; 254
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	44 24       	eor	r4, r4
 6ea:	43 94       	inc	r4
 6ec:	51 2c       	mov	r5, r1
 6ee:	54 01       	movw	r10, r8
 6f0:	15 c0       	rjmp	.+42     	; 0x71c <vfprintf+0x140>
 6f2:	38 01       	movw	r6, r16
 6f4:	f2 e0       	ldi	r31, 0x02	; 2
 6f6:	6f 0e       	add	r6, r31
 6f8:	71 1c       	adc	r7, r1
 6fa:	f8 01       	movw	r30, r16
 6fc:	a0 80       	ld	r10, Z
 6fe:	b1 80       	ldd	r11, Z+1	; 0x01
 700:	26 ff       	sbrs	r18, 6
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x12e>
 704:	65 2d       	mov	r22, r5
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <vfprintf+0x132>
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	c5 01       	movw	r24, r10
 710:	2c 87       	std	Y+12, r18	; 0x0c
 712:	0e 94 cd 04 	call	0x99a	; 0x99a <strnlen>
 716:	2c 01       	movw	r4, r24
 718:	83 01       	movw	r16, r6
 71a:	2c 85       	ldd	r18, Y+12	; 0x0c
 71c:	2f 77       	andi	r18, 0x7F	; 127
 71e:	22 2e       	mov	r2, r18
 720:	17 c0       	rjmp	.+46     	; 0x750 <vfprintf+0x174>
 722:	38 01       	movw	r6, r16
 724:	f2 e0       	ldi	r31, 0x02	; 2
 726:	6f 0e       	add	r6, r31
 728:	71 1c       	adc	r7, r1
 72a:	f8 01       	movw	r30, r16
 72c:	a0 80       	ld	r10, Z
 72e:	b1 80       	ldd	r11, Z+1	; 0x01
 730:	26 ff       	sbrs	r18, 6
 732:	03 c0       	rjmp	.+6      	; 0x73a <vfprintf+0x15e>
 734:	65 2d       	mov	r22, r5
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <vfprintf+0x162>
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	7f ef       	ldi	r23, 0xFF	; 255
 73e:	c5 01       	movw	r24, r10
 740:	2c 87       	std	Y+12, r18	; 0x0c
 742:	0e 94 c2 04 	call	0x984	; 0x984 <strnlen_P>
 746:	2c 01       	movw	r4, r24
 748:	2c 85       	ldd	r18, Y+12	; 0x0c
 74a:	20 68       	ori	r18, 0x80	; 128
 74c:	22 2e       	mov	r2, r18
 74e:	83 01       	movw	r16, r6
 750:	23 fc       	sbrc	r2, 3
 752:	1b c0       	rjmp	.+54     	; 0x78a <vfprintf+0x1ae>
 754:	83 2d       	mov	r24, r3
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	48 16       	cp	r4, r24
 75a:	59 06       	cpc	r5, r25
 75c:	b0 f4       	brcc	.+44     	; 0x78a <vfprintf+0x1ae>
 75e:	b7 01       	movw	r22, r14
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 768:	3a 94       	dec	r3
 76a:	f4 cf       	rjmp	.-24     	; 0x754 <vfprintf+0x178>
 76c:	f5 01       	movw	r30, r10
 76e:	27 fc       	sbrc	r2, 7
 770:	85 91       	lpm	r24, Z+
 772:	27 fe       	sbrs	r2, 7
 774:	81 91       	ld	r24, Z+
 776:	5f 01       	movw	r10, r30
 778:	b7 01       	movw	r22, r14
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 780:	31 10       	cpse	r3, r1
 782:	3a 94       	dec	r3
 784:	f1 e0       	ldi	r31, 0x01	; 1
 786:	4f 1a       	sub	r4, r31
 788:	51 08       	sbc	r5, r1
 78a:	41 14       	cp	r4, r1
 78c:	51 04       	cpc	r5, r1
 78e:	71 f7       	brne	.-36     	; 0x76c <vfprintf+0x190>
 790:	e5 c0       	rjmp	.+458    	; 0x95c <vfprintf+0x380>
 792:	84 36       	cpi	r24, 0x64	; 100
 794:	11 f0       	breq	.+4      	; 0x79a <vfprintf+0x1be>
 796:	89 36       	cpi	r24, 0x69	; 105
 798:	39 f5       	brne	.+78     	; 0x7e8 <vfprintf+0x20c>
 79a:	f8 01       	movw	r30, r16
 79c:	27 ff       	sbrs	r18, 7
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <vfprintf+0x1d2>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	82 81       	ldd	r24, Z+2	; 0x02
 7a6:	93 81       	ldd	r25, Z+3	; 0x03
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <vfprintf+0x1e2>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	07 2e       	mov	r0, r23
 7b4:	00 0c       	add	r0, r0
 7b6:	88 0b       	sbc	r24, r24
 7b8:	99 0b       	sbc	r25, r25
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	2f 76       	andi	r18, 0x6F	; 111
 7c0:	72 2e       	mov	r7, r18
 7c2:	97 ff       	sbrs	r25, 7
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x1fc>
 7c6:	90 95       	com	r25
 7c8:	80 95       	com	r24
 7ca:	70 95       	com	r23
 7cc:	61 95       	neg	r22
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	20 68       	ori	r18, 0x80	; 128
 7d6:	72 2e       	mov	r7, r18
 7d8:	2a e0       	ldi	r18, 0x0A	; 10
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	a4 01       	movw	r20, r8
 7de:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 7e2:	a8 2e       	mov	r10, r24
 7e4:	a8 18       	sub	r10, r8
 7e6:	44 c0       	rjmp	.+136    	; 0x870 <vfprintf+0x294>
 7e8:	85 37       	cpi	r24, 0x75	; 117
 7ea:	29 f4       	brne	.+10     	; 0x7f6 <vfprintf+0x21a>
 7ec:	2f 7e       	andi	r18, 0xEF	; 239
 7ee:	b2 2e       	mov	r11, r18
 7f0:	2a e0       	ldi	r18, 0x0A	; 10
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	25 c0       	rjmp	.+74     	; 0x840 <vfprintf+0x264>
 7f6:	f2 2f       	mov	r31, r18
 7f8:	f9 7f       	andi	r31, 0xF9	; 249
 7fa:	bf 2e       	mov	r11, r31
 7fc:	8f 36       	cpi	r24, 0x6F	; 111
 7fe:	c1 f0       	breq	.+48     	; 0x830 <vfprintf+0x254>
 800:	18 f4       	brcc	.+6      	; 0x808 <vfprintf+0x22c>
 802:	88 35       	cpi	r24, 0x58	; 88
 804:	79 f0       	breq	.+30     	; 0x824 <vfprintf+0x248>
 806:	b4 c0       	rjmp	.+360    	; 0x970 <vfprintf+0x394>
 808:	80 37       	cpi	r24, 0x70	; 112
 80a:	19 f0       	breq	.+6      	; 0x812 <vfprintf+0x236>
 80c:	88 37       	cpi	r24, 0x78	; 120
 80e:	21 f0       	breq	.+8      	; 0x818 <vfprintf+0x23c>
 810:	af c0       	rjmp	.+350    	; 0x970 <vfprintf+0x394>
 812:	2f 2f       	mov	r18, r31
 814:	20 61       	ori	r18, 0x10	; 16
 816:	b2 2e       	mov	r11, r18
 818:	b4 fe       	sbrs	r11, 4
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x25a>
 81c:	8b 2d       	mov	r24, r11
 81e:	84 60       	ori	r24, 0x04	; 4
 820:	b8 2e       	mov	r11, r24
 822:	09 c0       	rjmp	.+18     	; 0x836 <vfprintf+0x25a>
 824:	24 ff       	sbrs	r18, 4
 826:	0a c0       	rjmp	.+20     	; 0x83c <vfprintf+0x260>
 828:	9f 2f       	mov	r25, r31
 82a:	96 60       	ori	r25, 0x06	; 6
 82c:	b9 2e       	mov	r11, r25
 82e:	06 c0       	rjmp	.+12     	; 0x83c <vfprintf+0x260>
 830:	28 e0       	ldi	r18, 0x08	; 8
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	05 c0       	rjmp	.+10     	; 0x840 <vfprintf+0x264>
 836:	20 e1       	ldi	r18, 0x10	; 16
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x264>
 83c:	20 e1       	ldi	r18, 0x10	; 16
 83e:	32 e0       	ldi	r19, 0x02	; 2
 840:	f8 01       	movw	r30, r16
 842:	b7 fe       	sbrs	r11, 7
 844:	07 c0       	rjmp	.+14     	; 0x854 <vfprintf+0x278>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0x284>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 5f       	subi	r16, 0xFE	; 254
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	a4 01       	movw	r20, r8
 862:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 866:	a8 2e       	mov	r10, r24
 868:	a8 18       	sub	r10, r8
 86a:	fb 2d       	mov	r31, r11
 86c:	ff 77       	andi	r31, 0x7F	; 127
 86e:	7f 2e       	mov	r7, r31
 870:	76 fe       	sbrs	r7, 6
 872:	0b c0       	rjmp	.+22     	; 0x88a <vfprintf+0x2ae>
 874:	37 2d       	mov	r19, r7
 876:	3e 7f       	andi	r19, 0xFE	; 254
 878:	a5 14       	cp	r10, r5
 87a:	50 f4       	brcc	.+20     	; 0x890 <vfprintf+0x2b4>
 87c:	74 fe       	sbrs	r7, 4
 87e:	0a c0       	rjmp	.+20     	; 0x894 <vfprintf+0x2b8>
 880:	72 fc       	sbrc	r7, 2
 882:	08 c0       	rjmp	.+16     	; 0x894 <vfprintf+0x2b8>
 884:	37 2d       	mov	r19, r7
 886:	3e 7e       	andi	r19, 0xEE	; 238
 888:	05 c0       	rjmp	.+10     	; 0x894 <vfprintf+0x2b8>
 88a:	ba 2c       	mov	r11, r10
 88c:	37 2d       	mov	r19, r7
 88e:	03 c0       	rjmp	.+6      	; 0x896 <vfprintf+0x2ba>
 890:	ba 2c       	mov	r11, r10
 892:	01 c0       	rjmp	.+2      	; 0x896 <vfprintf+0x2ba>
 894:	b5 2c       	mov	r11, r5
 896:	34 ff       	sbrs	r19, 4
 898:	0d c0       	rjmp	.+26     	; 0x8b4 <vfprintf+0x2d8>
 89a:	fe 01       	movw	r30, r28
 89c:	ea 0d       	add	r30, r10
 89e:	f1 1d       	adc	r31, r1
 8a0:	80 81       	ld	r24, Z
 8a2:	80 33       	cpi	r24, 0x30	; 48
 8a4:	11 f4       	brne	.+4      	; 0x8aa <vfprintf+0x2ce>
 8a6:	39 7e       	andi	r19, 0xE9	; 233
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <vfprintf+0x2e0>
 8aa:	32 ff       	sbrs	r19, 2
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0x2de>
 8ae:	b3 94       	inc	r11
 8b0:	b3 94       	inc	r11
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <vfprintf+0x2e0>
 8b4:	83 2f       	mov	r24, r19
 8b6:	86 78       	andi	r24, 0x86	; 134
 8b8:	09 f0       	breq	.+2      	; 0x8bc <vfprintf+0x2e0>
 8ba:	b3 94       	inc	r11
 8bc:	33 fd       	sbrc	r19, 3
 8be:	13 c0       	rjmp	.+38     	; 0x8e6 <vfprintf+0x30a>
 8c0:	30 ff       	sbrs	r19, 0
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0x2f4>
 8c4:	5a 2c       	mov	r5, r10
 8c6:	b3 14       	cp	r11, r3
 8c8:	18 f4       	brcc	.+6      	; 0x8d0 <vfprintf+0x2f4>
 8ca:	53 0c       	add	r5, r3
 8cc:	5b 18       	sub	r5, r11
 8ce:	b3 2c       	mov	r11, r3
 8d0:	b3 14       	cp	r11, r3
 8d2:	68 f4       	brcc	.+26     	; 0x8ee <vfprintf+0x312>
 8d4:	b7 01       	movw	r22, r14
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	3c 87       	std	Y+12, r19	; 0x0c
 8dc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 8e0:	b3 94       	inc	r11
 8e2:	3c 85       	ldd	r19, Y+12	; 0x0c
 8e4:	f5 cf       	rjmp	.-22     	; 0x8d0 <vfprintf+0x2f4>
 8e6:	b3 14       	cp	r11, r3
 8e8:	10 f4       	brcc	.+4      	; 0x8ee <vfprintf+0x312>
 8ea:	3b 18       	sub	r3, r11
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <vfprintf+0x314>
 8ee:	31 2c       	mov	r3, r1
 8f0:	34 ff       	sbrs	r19, 4
 8f2:	12 c0       	rjmp	.+36     	; 0x918 <vfprintf+0x33c>
 8f4:	b7 01       	movw	r22, r14
 8f6:	80 e3       	ldi	r24, 0x30	; 48
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	3c 87       	std	Y+12, r19	; 0x0c
 8fc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 900:	3c 85       	ldd	r19, Y+12	; 0x0c
 902:	32 ff       	sbrs	r19, 2
 904:	17 c0       	rjmp	.+46     	; 0x934 <vfprintf+0x358>
 906:	31 fd       	sbrc	r19, 1
 908:	03 c0       	rjmp	.+6      	; 0x910 <vfprintf+0x334>
 90a:	88 e7       	ldi	r24, 0x78	; 120
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x338>
 910:	88 e5       	ldi	r24, 0x58	; 88
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	b7 01       	movw	r22, r14
 916:	0c c0       	rjmp	.+24     	; 0x930 <vfprintf+0x354>
 918:	83 2f       	mov	r24, r19
 91a:	86 78       	andi	r24, 0x86	; 134
 91c:	59 f0       	breq	.+22     	; 0x934 <vfprintf+0x358>
 91e:	31 ff       	sbrs	r19, 1
 920:	02 c0       	rjmp	.+4      	; 0x926 <vfprintf+0x34a>
 922:	8b e2       	ldi	r24, 0x2B	; 43
 924:	01 c0       	rjmp	.+2      	; 0x928 <vfprintf+0x34c>
 926:	80 e2       	ldi	r24, 0x20	; 32
 928:	37 fd       	sbrc	r19, 7
 92a:	8d e2       	ldi	r24, 0x2D	; 45
 92c:	b7 01       	movw	r22, r14
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 934:	a5 14       	cp	r10, r5
 936:	38 f4       	brcc	.+14     	; 0x946 <vfprintf+0x36a>
 938:	b7 01       	movw	r22, r14
 93a:	80 e3       	ldi	r24, 0x30	; 48
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 942:	5a 94       	dec	r5
 944:	f7 cf       	rjmp	.-18     	; 0x934 <vfprintf+0x358>
 946:	aa 94       	dec	r10
 948:	f4 01       	movw	r30, r8
 94a:	ea 0d       	add	r30, r10
 94c:	f1 1d       	adc	r31, r1
 94e:	80 81       	ld	r24, Z
 950:	b7 01       	movw	r22, r14
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 958:	a1 10       	cpse	r10, r1
 95a:	f5 cf       	rjmp	.-22     	; 0x946 <vfprintf+0x36a>
 95c:	33 20       	and	r3, r3
 95e:	09 f4       	brne	.+2      	; 0x962 <vfprintf+0x386>
 960:	4f ce       	rjmp	.-866    	; 0x600 <vfprintf+0x24>
 962:	b7 01       	movw	r22, r14
 964:	80 e2       	ldi	r24, 0x20	; 32
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <fputc>
 96c:	3a 94       	dec	r3
 96e:	f6 cf       	rjmp	.-20     	; 0x95c <vfprintf+0x380>
 970:	f7 01       	movw	r30, r14
 972:	86 81       	ldd	r24, Z+6	; 0x06
 974:	97 81       	ldd	r25, Z+7	; 0x07
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x3a0>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	2c 96       	adiw	r28, 0x0c	; 12
 97e:	e2 e1       	ldi	r30, 0x12	; 18
 980:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__epilogue_restores__>

00000984 <strnlen_P>:
 984:	fc 01       	movw	r30, r24
 986:	05 90       	lpm	r0, Z+
 988:	61 50       	subi	r22, 0x01	; 1
 98a:	70 40       	sbci	r23, 0x00	; 0
 98c:	01 10       	cpse	r0, r1
 98e:	d8 f7       	brcc	.-10     	; 0x986 <strnlen_P+0x2>
 990:	80 95       	com	r24
 992:	90 95       	com	r25
 994:	8e 0f       	add	r24, r30
 996:	9f 1f       	adc	r25, r31
 998:	08 95       	ret

0000099a <strnlen>:
 99a:	fc 01       	movw	r30, r24
 99c:	61 50       	subi	r22, 0x01	; 1
 99e:	70 40       	sbci	r23, 0x00	; 0
 9a0:	01 90       	ld	r0, Z+
 9a2:	01 10       	cpse	r0, r1
 9a4:	d8 f7       	brcc	.-10     	; 0x99c <strnlen+0x2>
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	8e 0f       	add	r24, r30
 9ac:	9f 1f       	adc	r25, r31
 9ae:	08 95       	ret

000009b0 <fputc>:
 9b0:	0f 93       	push	r16
 9b2:	1f 93       	push	r17
 9b4:	cf 93       	push	r28
 9b6:	df 93       	push	r29
 9b8:	fb 01       	movw	r30, r22
 9ba:	23 81       	ldd	r18, Z+3	; 0x03
 9bc:	21 fd       	sbrc	r18, 1
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <fputc+0x16>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	28 c0       	rjmp	.+80     	; 0xa16 <fputc+0x66>
 9c6:	22 ff       	sbrs	r18, 2
 9c8:	16 c0       	rjmp	.+44     	; 0x9f6 <fputc+0x46>
 9ca:	46 81       	ldd	r20, Z+6	; 0x06
 9cc:	57 81       	ldd	r21, Z+7	; 0x07
 9ce:	24 81       	ldd	r18, Z+4	; 0x04
 9d0:	35 81       	ldd	r19, Z+5	; 0x05
 9d2:	42 17       	cp	r20, r18
 9d4:	53 07       	cpc	r21, r19
 9d6:	44 f4       	brge	.+16     	; 0x9e8 <fputc+0x38>
 9d8:	a0 81       	ld	r26, Z
 9da:	b1 81       	ldd	r27, Z+1	; 0x01
 9dc:	9d 01       	movw	r18, r26
 9de:	2f 5f       	subi	r18, 0xFF	; 255
 9e0:	3f 4f       	sbci	r19, 0xFF	; 255
 9e2:	31 83       	std	Z+1, r19	; 0x01
 9e4:	20 83       	st	Z, r18
 9e6:	8c 93       	st	X, r24
 9e8:	26 81       	ldd	r18, Z+6	; 0x06
 9ea:	37 81       	ldd	r19, Z+7	; 0x07
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	37 83       	std	Z+7, r19	; 0x07
 9f2:	26 83       	std	Z+6, r18	; 0x06
 9f4:	10 c0       	rjmp	.+32     	; 0xa16 <fputc+0x66>
 9f6:	eb 01       	movw	r28, r22
 9f8:	09 2f       	mov	r16, r25
 9fa:	18 2f       	mov	r17, r24
 9fc:	00 84       	ldd	r0, Z+8	; 0x08
 9fe:	f1 85       	ldd	r31, Z+9	; 0x09
 a00:	e0 2d       	mov	r30, r0
 a02:	09 95       	icall
 a04:	89 2b       	or	r24, r25
 a06:	e1 f6       	brne	.-72     	; 0x9c0 <fputc+0x10>
 a08:	8e 81       	ldd	r24, Y+6	; 0x06
 a0a:	9f 81       	ldd	r25, Y+7	; 0x07
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9f 83       	std	Y+7, r25	; 0x07
 a10:	8e 83       	std	Y+6, r24	; 0x06
 a12:	81 2f       	mov	r24, r17
 a14:	90 2f       	mov	r25, r16
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__ultoa_invert>:
 a20:	fa 01       	movw	r30, r20
 a22:	aa 27       	eor	r26, r26
 a24:	28 30       	cpi	r18, 0x08	; 8
 a26:	61 f1       	breq	.+88     	; 0xa80 <__ultoa_invert+0x60>
 a28:	20 31       	cpi	r18, 0x10	; 16
 a2a:	91 f1       	breq	.+100    	; 0xa90 <__ultoa_invert+0x70>
 a2c:	e8 94       	clt
 a2e:	6f 93       	push	r22
 a30:	6e 7f       	andi	r22, 0xFE	; 254
 a32:	6e 5f       	subi	r22, 0xFE	; 254
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	af 4f       	sbci	r26, 0xFF	; 255
 a3c:	b1 e0       	ldi	r27, 0x01	; 1
 a3e:	40 d0       	rcall	.+128    	; 0xac0 <__ultoa_invert+0xa0>
 a40:	b4 e0       	ldi	r27, 0x04	; 4
 a42:	3e d0       	rcall	.+124    	; 0xac0 <__ultoa_invert+0xa0>
 a44:	67 0f       	add	r22, r23
 a46:	78 1f       	adc	r23, r24
 a48:	89 1f       	adc	r24, r25
 a4a:	9a 1f       	adc	r25, r26
 a4c:	a1 1d       	adc	r26, r1
 a4e:	68 0f       	add	r22, r24
 a50:	79 1f       	adc	r23, r25
 a52:	8a 1f       	adc	r24, r26
 a54:	91 1d       	adc	r25, r1
 a56:	a1 1d       	adc	r26, r1
 a58:	6a 0f       	add	r22, r26
 a5a:	71 1d       	adc	r23, r1
 a5c:	81 1d       	adc	r24, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	a1 1d       	adc	r26, r1
 a62:	22 d0       	rcall	.+68     	; 0xaa8 <__ultoa_invert+0x88>
 a64:	09 f4       	brne	.+2      	; 0xa68 <__ultoa_invert+0x48>
 a66:	68 94       	set
 a68:	3f 91       	pop	r19
 a6a:	06 2e       	mov	r0, r22
 a6c:	00 0c       	add	r0, r0
 a6e:	30 19       	sub	r19, r0
 a70:	00 0c       	add	r0, r0
 a72:	00 0c       	add	r0, r0
 a74:	30 19       	sub	r19, r0
 a76:	30 5d       	subi	r19, 0xD0	; 208
 a78:	31 93       	st	Z+, r19
 a7a:	ce f6       	brtc	.-78     	; 0xa2e <__ultoa_invert+0xe>
 a7c:	cf 01       	movw	r24, r30
 a7e:	08 95       	ret
 a80:	46 2f       	mov	r20, r22
 a82:	47 70       	andi	r20, 0x07	; 7
 a84:	40 5d       	subi	r20, 0xD0	; 208
 a86:	41 93       	st	Z+, r20
 a88:	b3 e0       	ldi	r27, 0x03	; 3
 a8a:	0f d0       	rcall	.+30     	; 0xaaa <__ultoa_invert+0x8a>
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__ultoa_invert+0x60>
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <__ultoa_invert+0x5c>
 a90:	46 2f       	mov	r20, r22
 a92:	4f 70       	andi	r20, 0x0F	; 15
 a94:	40 5d       	subi	r20, 0xD0	; 208
 a96:	4a 33       	cpi	r20, 0x3A	; 58
 a98:	18 f0       	brcs	.+6      	; 0xaa0 <__ultoa_invert+0x80>
 a9a:	49 5d       	subi	r20, 0xD9	; 217
 a9c:	31 fd       	sbrc	r19, 1
 a9e:	40 52       	subi	r20, 0x20	; 32
 aa0:	41 93       	st	Z+, r20
 aa2:	02 d0       	rcall	.+4      	; 0xaa8 <__ultoa_invert+0x88>
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__ultoa_invert+0x70>
 aa6:	ea cf       	rjmp	.-44     	; 0xa7c <__ultoa_invert+0x5c>
 aa8:	b4 e0       	ldi	r27, 0x04	; 4
 aaa:	a6 95       	lsr	r26
 aac:	97 95       	ror	r25
 aae:	87 95       	ror	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__ultoa_invert+0x8a>
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	61 05       	cpc	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	08 95       	ret
 ac0:	9b 01       	movw	r18, r22
 ac2:	ac 01       	movw	r20, r24
 ac4:	0a 2e       	mov	r0, r26
 ac6:	06 94       	lsr	r0
 ac8:	57 95       	ror	r21
 aca:	47 95       	ror	r20
 acc:	37 95       	ror	r19
 ace:	27 95       	ror	r18
 ad0:	ba 95       	dec	r27
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0xa6>
 ad4:	62 0f       	add	r22, r18
 ad6:	73 1f       	adc	r23, r19
 ad8:	84 1f       	adc	r24, r20
 ada:	95 1f       	adc	r25, r21
 adc:	a0 1d       	adc	r26, r0
 ade:	08 95       	ret

00000ae0 <__mulqi3>:
 ae0:	00 24       	eor	r0, r0

00000ae2 <__mulqi3_loop>:
 ae2:	80 fd       	sbrc	r24, 0
 ae4:	06 0e       	add	r0, r22
 ae6:	66 0f       	add	r22, r22
 ae8:	11 f0       	breq	.+4      	; 0xaee <__mulqi3_exit>
 aea:	86 95       	lsr	r24
 aec:	d1 f7       	brne	.-12     	; 0xae2 <__mulqi3_loop>

00000aee <__mulqi3_exit>:
 aee:	80 2d       	mov	r24, r0
 af0:	08 95       	ret

00000af2 <__prologue_saves__>:
 af2:	2f 92       	push	r2
 af4:	3f 92       	push	r3
 af6:	4f 92       	push	r4
 af8:	5f 92       	push	r5
 afa:	6f 92       	push	r6
 afc:	7f 92       	push	r7
 afe:	8f 92       	push	r8
 b00:	9f 92       	push	r9
 b02:	af 92       	push	r10
 b04:	bf 92       	push	r11
 b06:	cf 92       	push	r12
 b08:	df 92       	push	r13
 b0a:	ef 92       	push	r14
 b0c:	ff 92       	push	r15
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
 b1a:	ca 1b       	sub	r28, r26
 b1c:	db 0b       	sbc	r29, r27
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	09 94       	ijmp

00000b2a <__epilogue_restores__>:
 b2a:	2a 88       	ldd	r2, Y+18	; 0x12
 b2c:	39 88       	ldd	r3, Y+17	; 0x11
 b2e:	48 88       	ldd	r4, Y+16	; 0x10
 b30:	5f 84       	ldd	r5, Y+15	; 0x0f
 b32:	6e 84       	ldd	r6, Y+14	; 0x0e
 b34:	7d 84       	ldd	r7, Y+13	; 0x0d
 b36:	8c 84       	ldd	r8, Y+12	; 0x0c
 b38:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b3c:	b9 84       	ldd	r11, Y+9	; 0x09
 b3e:	c8 84       	ldd	r12, Y+8	; 0x08
 b40:	df 80       	ldd	r13, Y+7	; 0x07
 b42:	ee 80       	ldd	r14, Y+6	; 0x06
 b44:	fd 80       	ldd	r15, Y+5	; 0x05
 b46:	0c 81       	ldd	r16, Y+4	; 0x04
 b48:	1b 81       	ldd	r17, Y+3	; 0x03
 b4a:	aa 81       	ldd	r26, Y+2	; 0x02
 b4c:	b9 81       	ldd	r27, Y+1	; 0x01
 b4e:	ce 0f       	add	r28, r30
 b50:	d1 1d       	adc	r29, r1
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	ed 01       	movw	r28, r26
 b5e:	08 95       	ret

00000b60 <_exit>:
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>
